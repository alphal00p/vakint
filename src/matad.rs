use std::{collections::HashMap, sync::LazyLock};

use crate::matad_numerics::DIRECT_SUBSTITUTIONS;
use crate::utils::set_precision_in_float_atom;
use crate::utils::{self, set_precision_in_polynomial_atom};
use crate::{
    gt_condition,
    matad_numerics::{ADDITIONAL_CONSTANTS, HPL_SUBSTITUTIONS, POLY_GAMMA_SUBSTITUTIONS},
};
use colored::Colorize;
use log::debug;
use regex::Regex;
use string_template_plus::{Render, RenderOptions, Template};
use symbolica::{
    atom::{Atom, AtomView},
    domains::{integer::Integer, rational::Rational},
    fun,
    id::{Condition, MatchSettings, Pattern, PatternOrMap},
    state::State,
};

use crate::{
    even_condition, get_integer_from_match, number_condition, symbol_condition, symbols::S,
    MATADOptions, TEMPLATES,
};

use crate::{ReplacementRules, Vakint, VakintError};

#[rustfmt::skip]
pub static MASTERS_EXPANSION: LazyLock<HashMap<Atom, (Atom, symbolica::id::Condition<symbolica::id::PatternRestriction>)>> = LazyLock::new(|| {
    HashMap::<Atom, (Atom, symbolica::id::Condition<symbolica::id::PatternRestriction>)>::from_iter([
        ( Atom::parse("miD6").unwrap(), ( Atom::parse("(D6bar(0) + ep*D6bar(1) + ep^2*D6bar(2) + ep^3*Oep(3, D6) + (2*Zeta(3))/ep)/((1 - 2*ep)*(1 - ep))").unwrap(), Condition::default() ) ),
        ( Atom::parse("miD5").unwrap(), ( Atom::parse("(D5bar(0) + ep*D5bar(1) + ep^2*D5bar(2) + ep^3*Oep(3, D5) + (2*Zeta(3))/ep)/((1 - 2*ep)*(1 - ep))").unwrap(), Condition::default() ) ),
        ( Atom::parse("miD4").unwrap(), ( Atom::parse("(D4bar(0) + ep*D4bar(1) + ep^2*D4bar(2) + ep^3*Oep(3, D4) + (2*Zeta(3))/ep)/((1 - 2*ep)*(1 - ep))").unwrap(), Condition::default() ) ),
        ( Atom::parse("miD3").unwrap(), ( Atom::parse("(D3bar(0) + ep*D3bar(1) + ep^2*D3bar(2) + ep^3*Oep(3, D3) + (2*Zeta(3))/ep)/((1 - 2*ep)*(1 - ep))").unwrap(), Condition::default() ) ),
        ( Atom::parse("miDM").unwrap(), ( Atom::parse("(DMbar(0) + ep*DMbar(1) + ep^2*DMbar(2) + ep^3*Oep(3, DM) + (2*Zeta(3))/ep)/((1 - 2*ep)*(1 - ep))").unwrap(), Condition::default()) ),
        ( Atom::parse("miDN").unwrap(), ( Atom::parse("(DNbar(0) + ep*DNbar(1) + ep^2*DNbar(2) + ep^3*Oep(3, DN) + (2*Zeta(3))/ep)/((1 - 2*ep)*(1 - ep))").unwrap(), Condition::default() ) ),
        ( Atom::parse("miE3").unwrap(), ( Atom::parse("((exp(3*ep*EulerGamma)*Gamma(1 - ep)*Gamma(1 + ep)^2*Gamma(1 + 2*ep)*(1 + ((1 - ep)*Gamma(1 + 2*ep)*Gamma(1 + 3*ep))/(3*(1 - 3*ep)*Gamma(1 + ep)*Gamma(1 + 4*ep))))/(2*ep^3) + (E3bar(-1)/ep + E3bar(0) + ep*E3bar(1) + ep^2*E3bar(2) + ep^3*E3bar(3) + ep^4*Oep(4, E3))/Sqrt(3))/((1 - 2*ep)^2*(-1 + ep))").unwrap(), Condition::default() ) ),
        ( Atom::parse("miBN").unwrap(), ( Atom::parse("(exp(3*ep*EulerGamma)*Gamma(1 + ep)^3*(4/ep^3 - 44/(3*ep^2) + ep*BNbar(1) + ep^2*BNbar(2) + ep^3*BNbar(3) + ep^4*BNbar(4) + ep^5*Oep(5, BN)))/((1 - 3*ep)*(2 - 3*ep)*(1 - 2*ep)*(1 - ep))").unwrap(), Condition::default() ) ),
        ( Atom::parse("miBN1").unwrap(), ( Atom::parse("-1/2*(exp(3*ep*EulerGamma)*(-1 + ep)^2*(-4 + 15*ep)*Gamma(-1 + ep)^3)/((-1 + 2*ep)*(-2 + 3*ep)*(-1 + 3*ep)) + (3*Sqrt(3)*(BN1bar(0) + ep*BN1bar(1) + ep^2*BN1bar(2) + ep^3*BN1bar(3) + ep^4*BN1bar(4) + ep^5*Oep(5, BN1)))/(2*(1 - ep)*(-1 + 2*ep)*(-2 + 3*ep)*(-1 + 3*ep))").unwrap(), Condition::default() ) ),
        ( Atom::parse("miT111").unwrap(), ( Atom::parse("(exp(2*ep*EulerGamma)*Gamma(1 + ep)^2*((3*Sqrt(3))/(2*ep^2) + ep^5*Oep(5, T1) + T111bar(0) + ep*T111bar(1) + ep^2*T111bar(2) + ep^3*T111bar(3) + ep^4*T111bar(4)))/(Sqrt(3)*(1 - 2*ep)*(-1 + ep))").unwrap(), Condition::default() ) ),
        ( Atom::parse("Gamma(b_*ep)").unwrap(), ( Atom::parse("GammaArgs(0,b_)").unwrap(), Condition::default() ) ),
        ( Atom::parse("Gamma(ep)").unwrap(), ( Atom::parse("GammaArgs(0,1)").unwrap(), Condition::default() ) ),
        ( Atom::parse("Gamma(-ep)").unwrap(), ( Atom::parse("GammaArgs(0,-1)").unwrap(), Condition::default() ) ),
        ( Atom::parse("Gamma(a_ + ep)").unwrap(), ( Atom::parse("GammaArgs(a_,1)").unwrap(), Condition::default() ) ),
        ( Atom::parse("Gamma(a_ - ep)").unwrap(), ( Atom::parse("GammaArgs(a_,-1)").unwrap(), Condition::default() ) ),
        ( Atom::parse("Gamma(a_ + b_*ep)").unwrap(), ( Atom::parse("GammaArgs(a_,b_)").unwrap(), Condition::default() ) ),
        ( Atom::parse("GammaArgs(-1,b_)").unwrap(), ( Atom::parse("-1 + EulerGamma - 1/(ep*(b_)) + ep*(-(b_) + EulerGamma*(b_) - ((EulerGamma^2 + 𝜋^2/6)*(b_))/2) + ep^2*(-(b_)^2 + EulerGamma*(b_)^2 - ((EulerGamma^2 + 𝜋^2/6)*(b_)^2)/2 - ((b_)^2*(-EulerGamma^3 - (EulerGamma*𝜋^2)/2 + PolyGamma(2, 1)))/6) + ep^3*(-(b_)^3 + EulerGamma*(b_)^3 - ((EulerGamma^2 + 𝜋^2/6)*(b_)^3)/2 - ((b_)^3*(-EulerGamma^3 - (EulerGamma*𝜋^2)/2 + PolyGamma(2, 1)))/6 - ((b_)^3*(EulerGamma^4 + EulerGamma^2*𝜋^2 + (3*𝜋^4)/20 - 4*EulerGamma*PolyGamma(2, 1)))/24) + ep^4*(-(b_)^4 + EulerGamma*(b_)^4 - ((EulerGamma^2 + 𝜋^2/6)*(b_)^4)/2 - ((b_)^4*(-EulerGamma^3 - (EulerGamma*𝜋^2)/2 + PolyGamma(2, 1)))/6 - ((b_)^4*(EulerGamma^4 + EulerGamma^2*𝜋^2 + (3*𝜋^4)/20 - 4*EulerGamma*PolyGamma(2, 1)))/24 - ((b_)^4*(-EulerGamma^5 - (5*EulerGamma^3*𝜋^2)/3 - (3*EulerGamma*𝜋^4)/4 + 10*EulerGamma^2*PolyGamma(2, 1) + (5*𝜋^2*PolyGamma(2, 1))/3 + PolyGamma(4, 1)))/120) + ep^5*(-(b_)^5 + EulerGamma*(b_)^5 - ((EulerGamma^2 + 𝜋^2/6)*(b_)^5)/2 - ((b_)^5*(-EulerGamma^3 - (EulerGamma*𝜋^2)/2 + PolyGamma(2, 1)))/6 - ((b_)^5*(EulerGamma^4 + EulerGamma^2*𝜋^2 + (3*𝜋^4)/20 - 4*EulerGamma*PolyGamma(2, 1)))/24 - ((b_)^5*(-EulerGamma^5 - (5*EulerGamma^3*𝜋^2)/3 - (3*EulerGamma*𝜋^4)/4 + 10*EulerGamma^2*PolyGamma(2, 1) + (5*𝜋^2*PolyGamma(2, 1))/3 + PolyGamma(4, 1)))/120 - ((b_)^5*(EulerGamma^6 + (5*EulerGamma^4*𝜋^2)/2 + (9*EulerGamma^2*𝜋^4)/4 + (61*𝜋^6)/168 - 20*EulerGamma^3*PolyGamma(2, 1) - 10*EulerGamma*𝜋^2*PolyGamma(2, 1) + 10*PolyGamma(2, 1)^2 - 6*EulerGamma*PolyGamma(4, 1)))/720) + ep^6 * Oep(6, I_Gamma)").unwrap(), Condition::default() ) ),
        ( Atom::parse("GammaArgs(0,b_)").unwrap(), ( Atom::parse("-EulerGamma + 1/(ep*(b_)) + (ep*(6*EulerGamma^2 + 𝜋^2)*(b_))/12 + (ep^2*(b_)^2*(-EulerGamma^3 - (EulerGamma*𝜋^2)/2 + PolyGamma(2, 1)))/6 + (ep^3*(b_)^3*(EulerGamma^4 + EulerGamma^2*𝜋^2 + (3*𝜋^4)/20 - 4*EulerGamma*PolyGamma(2, 1)))/24 + (ep^4*(b_)^4*(-EulerGamma^5 - (5*EulerGamma^3*𝜋^2)/3 - (3*EulerGamma*𝜋^4)/4 + 10*EulerGamma^2*PolyGamma(2, 1) + (5*𝜋^2*PolyGamma(2, 1))/3 + PolyGamma(4, 1)))/120 + (ep^5*(b_)^5*(EulerGamma^6 + (5*EulerGamma^4*𝜋^2)/2 + (9*EulerGamma^2*𝜋^4)/4 + (61*𝜋^6)/168 - 20*EulerGamma^3*PolyGamma(2, 1) - 10*EulerGamma*𝜋^2*PolyGamma(2, 1) + 10*PolyGamma(2, 1)^2 - 6*EulerGamma*PolyGamma(4, 1)))/720 + ep^6 * Oep(6, I_Gamma)").unwrap(), Condition::default() ) ),
        ( Atom::parse("GammaArgs(a_,b_)").unwrap(), ( Atom::parse("Gamma(a_) + ep*Gamma(a_)*(b_)*PolyGamma(0, a_) + (ep^2*(b_)^2*(Gamma(a_)*PolyGamma(0, a_)^2 + Gamma(a_)*PolyGamma(1, a_)))/2 + (ep^3*(b_)^3*(Gamma(a_)*PolyGamma(0, a_)^3 + 3*Gamma(a_)*PolyGamma(0, a_)*PolyGamma(1, a_) + Gamma(a_)*PolyGamma(2, a_)))/6 + (ep^4*(b_)^4*(Gamma(a_)*PolyGamma(0, a_)^4 + 6*Gamma(a_)*PolyGamma(0, a_)^2*PolyGamma(1, a_) + 3*Gamma(a_)*PolyGamma(1, a_)^2 + 4*Gamma(a_)*PolyGamma(0, a_)*PolyGamma(2, a_) + Gamma(a_)*PolyGamma(3, a_)))/24 + (ep^5*(b_)^5*(Gamma(a_)*PolyGamma(0, a_)^5 + 10*Gamma(a_)*PolyGamma(0, a_)^3*PolyGamma(1, a_) + 15*Gamma(a_)*PolyGamma(0, a_)*PolyGamma(1, a_)^2 + 10*Gamma(a_)*PolyGamma(0, a_)^2*PolyGamma(2, a_) + 10*Gamma(a_)*PolyGamma(1, a_)*PolyGamma(2, a_) + 5*Gamma(a_)*PolyGamma(0, a_)*PolyGamma(3, a_) + Gamma(a_)*PolyGamma(4, a_)))/120 + ep^6*Oep(6, I_Gamma)").unwrap(), Condition::from((S.a_, gt_condition(0))) ) ),
    ])
});

#[rustfmt::skip]
pub static MASTERS_SUBSTITUTION: LazyLock<HashMap<Atom, Atom>> = LazyLock::new(|| {
    HashMap::<Atom, Atom>::from_iter([
        ( Atom::parse("D6bar(0)").unwrap(), Atom::parse("(-72*HR(1, -1, 1, 0, om1))/11 + (180*HR(1, -1, 1, 1, om1))/11 + (148*HR(1, 0, 1, 0, om1))/11 - (144*HR(1, 1, -1, 0, om1))/11 + (360*HR(1, 1, -1, 1, om1))/11 + (540*HR(1, 1, 1, -1, om1))/11 - (33587*HR(1, 1, 1, 1, om1))/55").unwrap() ),
        ( Atom::parse("D6bar(1)").unwrap(), Atom::parse("156*HR(1, -1, 1, 1, 0, om1) - 16*HR(1, 0, -1, 1, 0, om1) - 16*HR(1, 0, 1, -1, 0, om1) - 468*HR(1, 0, 1, 1, 1, om1) + (7712*HR(1, 1, -1, 0, 0, om1))/87 - (7084*HR(1, 1, -1, 0, 1, om1))/87 + (15884*HR(1, 1, -1, 1, 0, om1))/87 + (5632*HR(1, 1, -1, 1, 1, om1))/29 - 36*HR(1, 1, 0, 1, -1, om1) - (13708319*HR(1, 1, 0, 1, 1, om1))/15138 + (9448*HR(1, 1, 1, -1, 0, om1))/87 + (15640*HR(1, 1, 1, -1, 1, om1))/29 - 108*HR(1, 1, 1, 0, -1, om1) - (59151355*HR(1, 1, 1, 0, 1, om1))/45414 + 992*HR(1, 1, 1, 1, -1, om1) - (51713387*HR(1, 1, 1, 1, 0, om1))/22707").unwrap() ),
        ( Atom::parse("D6bar(2)").unwrap(), Atom::parse("-624*HR(1, -1, -1, 1, 1, 0, om1) - (8592*HR(1, -1, 1, -1, 1, 0, om1))/11 + (4320*HR(1, -1, 1, -1, 1, 1, om1))/11 + (2848*HR(1, -1, 1, 0, 1, 0, om1))/11 - (10320*HR(1, -1, 1, 1, -1, 0, om1))/11 + (8640*HR(1, -1, 1, 1, -1, 1, om1))/11 + 144*HR(1, -1, 1, 1, 0, -1, om1) + (12960*HR(1, -1, 1, 1, 1, -1, om1))/11 - (391256*HR(1, -1, 1, 1, 1, 1, om1))/55 + 32*HR(1, 0, -1, -1, 1, 0, om1) + 32*HR(1, 0, -1, 1, -1, 0, om1) + 1976*HR(1, 0, -1, 1, 1, 1, om1) + 32*HR(1, 0, 1, -1, -1, 1, om1) + 32*HR(1, 0, 1, -1, 1, -1, om1) + (5024*HR(1, 0, 1, -1, 1, 0, om1))/33 + (17432*HR(1, 0, 1, -1, 1, 1, om1))/11 - (53444*HR(1, 0, 1, 0, 1, 1, om1))/99 + 64*HR(1, 0, 1, 1, -1, -1, om1) + (11104*HR(1, 0, 1, 1, -1, 0, om1))/33 + (12776*HR(1, 0, 1, 1, -1, 1, om1))/11 - (39451*HR(1, 0, 1, 1, 0, 1, om1))/99 + (7768*HR(1, 0, 1, 1, 1, -1, om1))/11 + (96931*HR(1, 0, 1, 1, 1, 0, om1))/99 - (16128*HR(1, 1, -1, -1, 1, 0, om1))/11 + (6000*HR(1, 1, -1, -1, 1, 1, om1))/11 - (19584*HR(1, 1, -1, 1, -1, 0, om1))/11 + (14640*HR(1, 1, -1, 1, -1, 1, om1))/11 + 288*HR(1, 1, -1, 1, 0, -1, om1) - (5696*HR(1, 1, -1, 1, 0, 1, om1))/11 + (23280*HR(1, 1, -1, 1, 1, -1, om1))/11 - (2128*HR(1, 1, -1, 1, 1, 0, om1))/11 - (372192*HR(1, 1, -1, 1, 1, 1, om1))/55 + (12064*HR(1, 1, 0, -1, 1, 1, om1))/3 + 208*HR(1, 1, 0, 1, -1, -1, om1) + (1405771580504*HR(1, 1, 0, 1, -1, 0, om1))/52401195 - (449711597968*HR(1, 1, 0, 1, -1, 1, om1))/17467065 - (820125684944*HR(1, 1, 0, 1, 1, -1, om1))/17467065 - (44309295476*HR(1, 1, 1, -1, -1, 0, om1))/1940785 + (42581643956*HR(1, 1, 1, -1, -1, 1, om1))/1940785 - (5328*HR(1, 1, 1, -1, 0, -1, om1))/5 + (56916979364*HR(1, 1, 1, -1, 0, 0, om1))/7485885 - (113890854256*HR(1, 1, 1, -1, 0, 1, om1))/7485885 + (44868241556*HR(1, 1, 1, -1, 1, -1, om1))/1940785 - (42534744232*HR(1, 1, 1, -1, 1, 0, om1))/52401195 + (104647550068*HR(1, 1, 1, -1, 1, 1, om1))/17467065 + 432*HR(1, 1, 1, 0, -1, -1, om1) + (179716135264*HR(1, 1, 1, 0, -1, 0, om1))/1940785 - (26026092432*HR(1, 1, 1, 0, -1, 1, om1))/277255 + (37024*HR(1, 1, 1, 0, 0, -1, om1))/5 + (2350091860163*HR(1, 1, 1, 0, 0, 1, om1))/471610755 - (909009749728*HR(1, 1, 1, 0, 1, -1, om1))/5822355 - (1515749729887*HR(1, 1, 1, 0, 1, 0, om1))/471610755 + (163974915824*HR(1, 1, 1, 1, -1, -1, om1))/1940785 + (551982130556*HR(1, 1, 1, 1, -1, 0, om1))/17467065 + (280123847084*HR(1, 1, 1, 1, -1, 1, om1))/17467065 - (19847388288*HR(1, 1, 1, 1, 0, -1, om1))/55451 + (8283679238293*HR(1, 1, 1, 1, 0, 0, om1))/419209560 - (4590966964*HR(1, 1, 1, 1, 1, -1, om1))/388157 - (14507424807748399*HR(1, 1, 1, 1, 1, 1, om1))/2400927480").unwrap() ),
        ( Atom::parse("D5bar(0)").unwrap(), Atom::parse("-26*HR(-1, 1, 1, 0, om1) - 26*HR(1, -1, 1, 0, om1) + (16*HR(1, 0, 1, 0, om1))/3 - 26*HR(1, 1, -1, 0, om1) + 6*HR(1, 1, 0, -1, om1) + (616*HR(1, 1, 1, 1, om1))/15").unwrap() ),
        ( Atom::parse("D5bar(1)").unwrap(), Atom::parse("104*HR(-1, -1, 1, 1, 0, om1) + (1432*HR(-1, 1, -1, 1, 0, om1))/11 - (720*HR(-1, 1, -1, 1, 1, om1))/11 - (1424*HR(-1, 1, 0, 1, 0, om1))/33 + (1720*HR(-1, 1, 1, -1, 0, om1))/11 - (1440*HR(-1, 1, 1, -1, 1, om1))/11 - 24*HR(-1, 1, 1, 0, -1, om1) - (2160*HR(-1, 1, 1, 1, -1, om1))/11 + (195628*HR(-1, 1, 1, 1, 1, om1))/165 + 260*HR(1, -1, -1, 1, 1, om1) + (2572*HR(1, -1, 1, -1, 1, om1))/11 + (668*HR(1, -1, 1, 0, 1, om1))/33 + (2284*HR(1, -1, 1, 1, -1, om1))/11 + (674*HR(1, -1, 1, 1, 0, om1))/3 + (1076*HR(1, 0, -1, 1, 0, om1))/11 + (1316*HR(1, 0, 1, -1, 0, om1))/11 - (360*HR(1, 0, 1, -1, 1, om1))/11 - 20*HR(1, 0, 1, 0, -1, om1) - (720*HR(1, 0, 1, 1, -1, om1))/11 - (14198*HR(1, 0, 1, 1, 1, om1))/33 + (4864*HR(1, 1, -1, -1, 1, om1))/11 - (11992*HR(1, 1, -1, 0, 0, om1))/405 + (759664*HR(1, 1, -1, 0, 1, om1))/4455 + (5008*HR(1, 1, -1, 1, -1, om1))/11 + (2357524*HR(1, 1, -1, 1, 0, om1))/4455 - (198584*HR(1, 1, -1, 1, 1, om1))/135 - 24*HR(1, 1, 0, -1, -1, om1) - (926*HR(1, 1, 0, 1, -1, om1))/11 - (559454947*HR(1, 1, 0, 1, 1, om1))/775170 + (6012*HR(1, 1, 1, -1, -1, om1))/11 + (850486*HR(1, 1, 1, -1, 0, om1))/891 - (5116084*HR(1, 1, 1, -1, 1, om1))/1485 + (3514*HR(1, 1, 1, 0, -1, om1))/33 - (44410145*HR(1, 1, 1, 0, 1, om1))/42282 - (9118444*HR(1, 1, 1, 1, -1, om1))/1485 - (2126716774*HR(1, 1, 1, 1, 0, om1))/1162755").unwrap() ),
        ( Atom::parse("D5bar(2)").unwrap(), Atom::parse("-416*HR(-1, -1, -1, 1, 1, 0, om1) - (5728*HR(-1, -1, 1, -1, 1, 0, om1))/11 + (2880*HR(-1, -1, 1, -1, 1, 1, om1))/11 + (5696*HR(-1, -1, 1, 0, 1, 0, om1))/33 - (6880*HR(-1, -1, 1, 1, -1, 0, om1))/11 + (5760*HR(-1, -1, 1, 1, -1, 1, om1))/11 + 96*HR(-1, -1, 1, 1, 0, -1, om1) + (8640*HR(-1, -1, 1, 1, 1, -1, om1))/11 - (782512*HR(-1, -1, 1, 1, 1, 1, om1))/165 - 1040*HR(-1, 1, -1, -1, 1, 1, om1) - (10288*HR(-1, 1, -1, 1, -1, 1, om1))/11 - (2672*HR(-1, 1, -1, 1, 0, 1, om1))/33 - (9136*HR(-1, 1, -1, 1, 1, -1, om1))/11 - (2696*HR(-1, 1, -1, 1, 1, 0, om1))/3 - (4304*HR(-1, 1, 0, -1, 1, 0, om1))/11 - (5264*HR(-1, 1, 0, 1, -1, 0, om1))/11 + (1440*HR(-1, 1, 0, 1, -1, 1, om1))/11 + 80*HR(-1, 1, 0, 1, 0, -1, om1) + (2880*HR(-1, 1, 0, 1, 1, -1, om1))/11 + (56792*HR(-1, 1, 0, 1, 1, 1, om1))/33 - (19456*HR(-1, 1, 1, -1, -1, 1, om1))/11 + (3257312*HR(-1, 1, 1, -1, 0, 0, om1))/11745 - (117630944*HR(-1, 1, 1, -1, 0, 1, om1))/129195 - (20032*HR(-1, 1, 1, -1, 1, -1, om1))/11 - (302982704*HR(-1, 1, 1, -1, 1, 0, om1))/129195 + (24202144*HR(-1, 1, 1, -1, 1, 1, om1))/3915 + 96*HR(-1, 1, 1, 0, -1, -1, om1) + (3704*HR(-1, 1, 1, 0, 1, -1, om1))/11 + (38639896921*HR(-1, 1, 1, 0, 1, 1, om1))/11239965 - (24048*HR(-1, 1, 1, 1, -1, -1, om1))/11 - (123547352*HR(-1, 1, 1, 1, -1, 0, om1))/25839 + (649919504*HR(-1, 1, 1, 1, -1, 1, om1))/43065 - (14056*HR(-1, 1, 1, 1, 0, -1, om1))/33 + (3586576799*HR(-1, 1, 1, 1, 0, 1, om1))/613089 + (41605936*HR(-1, 1, 1, 1, 1, -1, om1))/1485 + (357300160814*HR(-1, 1, 1, 1, 1, 0, om1))/33719895 - 1040*HR(1, -1, -1, -1, 1, 1, om1) - (10288*HR(1, -1, -1, 1, -1, 1, om1))/11 - (2672*HR(1, -1, -1, 1, 0, 1, om1))/33 - (9136*HR(1, -1, -1, 1, 1, -1, om1))/11 - (2696*HR(1, -1, -1, 1, 1, 0, om1))/3 - (576*HR(1, -1, 1, -1, 1, -1, om1))/11 - (387824*HR(1, -1, 1, -1, 1, 0, om1))/121 + (13241792*HR(1, -1, 1, -1, 1, 1, om1))/1815 - (35584*HR(1, -1, 1, 0, -1, 1, om1))/33 - (28792*HR(1, -1, 1, 0, 1, -1, om1))/33 + (2296288*HR(1, -1, 1, 0, 1, 0, om1))/1089 + (14864*HR(1, -1, 1, 1, -1, -1, om1))/11 - (5392193704*HR(1, -1, 1, 1, -1, 0, om1))/1421145 + (5442900016*HR(1, -1, 1, 1, -1, 1, om1))/473715 - (32280*HR(1, -1, 1, 1, 0, -1, om1))/11 + (6570705136*HR(1, -1, 1, 1, 1, -1, om1))/473715 + (25996220167837*HR(1, -1, 1, 1, 1, 1, om1))/1854594225 + (64*HR(1, 0, -1, -1, 1, 0, om1))/3 + (64*HR(1, 0, -1, 1, -1, 0, om1))/3 - (208*HR(1, 0, -1, 1, 1, 1, om1))/3 - (47936*HR(1, 0, 1, -1, -1, 1, om1))/33 - (47936*HR(1, 0, 1, -1, 1, -1, om1))/33 + (540736*HR(1, 0, 1, -1, 1, 0, om1))/363 - (345216128*HR(1, 0, 1, -1, 1, 1, om1))/94743 + 80*HR(1, 0, 1, 0, -1, -1, om1) + (49280509019*HR(1, 0, 1, 0, 1, 1, om1))/148367538 - (95872*HR(1, 0, 1, 1, -1, -1, om1))/33 + (634929920*HR(1, 0, 1, 1, -1, 0, om1))/852687 - (676898224*HR(1, 0, 1, 1, -1, 1, om1))/284229 + (387546944255*HR(1, 0, 1, 1, 0, 1, om1))/222551307 + (352181312*HR(1, 0, 1, 1, 1, -1, om1))/94743 + (4241416264027*HR(1, 0, 1, 1, 1, 0, om1))/445102614 + (19456*HR(1, 1, -1, -1, -1, 1, om1))/11 + (18880*HR(1, 1, -1, -1, 1, -1, om1))/11 - (1901200*HR(1, 1, -1, -1, 1, 0, om1))/363 + (19253152*HR(1, 1, -1, -1, 1, 1, om1))/1815 + (824*HR(1, 1, -1, 0, 1, -1, om1))/11 + (53776*HR(1, 1, -1, 1, -1, -1, om1))/11 - (5754526792*HR(1, 1, -1, 1, -1, 0, om1))/1421145 + (965522608*HR(1, 1, -1, 1, -1, 1, om1))/94743 - (34744*HR(1, 1, -1, 1, 0, -1, om1))/11 - (1791826416874*HR(1, 1, -1, 1, 0, 1, om1))/370918845 + (201931024*HR(1, 1, -1, 1, 1, -1, om1))/94743 - (5946278372713*HR(1, 1, -1, 1, 1, 0, om1))/370918845 + (181225331611139*HR(1, 1, -1, 1, 1, 1, om1))/1854594225 + 96*HR(1, 1, 0, -1, -1, -1, om1) + (824*HR(1, 1, 0, -1, 1, -1, om1))/11 - (61094644559*HR(1, 1, 0, -1, 1, 1, om1))/11239965 - (93400*HR(1, 1, 0, 1, -1, -1, om1))/33 + (71673534978119191589*HR(1, 1, 0, 1, -1, 0, om1))/588987597758175 - (27778395373685590393*HR(1, 1, 0, 1, -1, 1, om1))/196329199252725 - (39808709428404512639*HR(1, 1, 0, 1, 1, -1, om1))/196329199252725 + (92688*HR(1, 1, 1, -1, -1, -1, om1))/11 - (49767882477121799173*HR(1, 1, 1, -1, -1, 0, om1))/392658398505450 + (50254587600763374613*HR(1, 1, 1, -1, -1, 1, om1))/392658398505450 - (191463192286*HR(1, 1, 1, -1, 0, -1, om1))/18733275 + (30945325345674631*HR(1, 1, 1, -1, 0, 0, om1))/692519221350 - (15249629583930690367*HR(1, 1, 1, -1, 0, 1, om1))/168282170788050 + (43031534692552744213*HR(1, 1, 1, -1, 1, -1, om1))/392658398505450 - (41886306721880707259*HR(1, 1, 1, -1, 1, 0, om1))/1177975195516350 + (108791082954484641911*HR(1, 1, 1, -1, 1, 1, om1))/392658398505450 - (14056*HR(1, 1, 1, 0, -1, -1, om1))/33 + (89657794477349654246*HR(1, 1, 1, 0, -1, 0, om1))/196329199252725 - (4767577759273275116*HR(1, 1, 1, 0, -1, 1, om1))/9349009488225 + (1559414393279*HR(1, 1, 1, 0, 0, -1, om1))/33719895 + (13690397558977227041*HR(1, 1, 1, 0, 0, 1, om1))/848142140771772 - (15533573816964260686*HR(1, 1, 1, 0, 1, -1, om1))/21814355472525 - (882309482505750318589*HR(1, 1, 1, 0, 1, 0, om1))/21203553519294300 + (88944543800158224026*HR(1, 1, 1, 1, -1, -1, om1))/196329199252725 + (54362172151172329627*HR(1, 1, 1, 1, -1, 0, om1))/392658398505450 + (187944687444042632053*HR(1, 1, 1, 1, -1, 1, om1))/392658398505450 - (557811878457413554*HR(1, 1, 1, 1, 0, -1, om1))/322379637525 - (355643681672062658107*HR(1, 1, 1, 1, 0, 0, om1))/18847603128261600 + (13865776375815235211*HR(1, 1, 1, 1, 1, -1, om1))/26177226567030 - (3656464529968891203697567*HR(1, 1, 1, 1, 1, 1, om1))/107945363370952800").unwrap() ),
        ( Atom::parse("D4bar(0)").unwrap(), Atom::parse("12*HR(1, 0, 1, 0, om1) - (2742*HR(1, 1, 1, 1, om1))/5").unwrap() ),
        ( Atom::parse("D4bar(1)").unwrap(), Atom::parse("-56*HR(1, 0, -1, 1, 0, om1) - 56*HR(1, 0, 1, -1, 0, om1) + 198*HR(1, 0, 1, 1, 1, om1) + (15539*HR(1, 1, 0, 1, 1, om1))/174 - (152353*HR(1, 1, 1, 0, 1, om1))/522 - (219164*HR(1, 1, 1, 1, 0, om1))/261").unwrap() ),
        ( Atom::parse("D4bar(2)").unwrap(), Atom::parse("304*HR(1, 0, -1, -1, 1, 0, om1) + 304*HR(1, 0, -1, 1, -1, 0, om1) - 1020*HR(1, 0, -1, 1, 1, 1, om1) + 304*HR(1, 0, 1, -1, -1, 1, om1) + 304*HR(1, 0, 1, -1, 1, -1, om1) + (608*HR(1, 0, 1, -1, 1, 0, om1))/3 - 1628*HR(1, 0, 1, -1, 1, 1, om1) + (2602*HR(1, 0, 1, 0, 1, 1, om1))/9 + 608*HR(1, 0, 1, 1, -1, -1, om1) + (2128*HR(1, 0, 1, 1, -1, 0, om1))/3 - 2540*HR(1, 0, 1, 1, -1, 1, om1) + (3733*HR(1, 0, 1, 1, 0, 1, om1))/18 - 3756*HR(1, 0, 1, 1, 1, -1, om1) - (18773*HR(1, 0, 1, 1, 1, 0, om1))/18 - (4144*HR(1, 1, 0, -1, 1, 1, om1))/3 + 608*HR(1, 1, 0, 1, -1, -1, om1) - (84256336*HR(1, 1, 0, 1, -1, 0, om1))/136107 - (69730720*HR(1, 1, 0, 1, -1, 1, om1))/45369 - (104376080*HR(1, 1, 0, 1, 1, -1, om1))/45369 + (17755424*HR(1, 1, 1, -1, -1, 0, om1))/45369 - (17755424*HR(1, 1, 1, -1, -1, 1, om1))/45369 - (21428960*HR(1, 1, 1, -1, 0, 0, om1))/136107 + (4285792*HR(1, 1, 1, -1, 0, 1, om1))/15123 - (17755424*HR(1, 1, 1, -1, 1, -1, om1))/45369 + (3061280*HR(1, 1, 1, -1, 1, 0, om1))/136107 - (6734816*HR(1, 1, 1, -1, 1, 1, om1))/45369 - (20198672*HR(1, 1, 1, 0, -1, 0, om1))/5041 + (129077548*HR(1, 1, 1, 0, -1, 1, om1))/45369 - (1187408470*HR(1, 1, 1, 0, 0, 1, om1))/1224963 + (190647580*HR(1, 1, 1, 0, 1, -1, om1))/45369 + (3293614283*HR(1, 1, 1, 0, 1, 0, om1))/1224963 - (71021696*HR(1, 1, 1, 1, -1, -1, om1))/45369 - (26327008*HR(1, 1, 1, 1, -1, 0, om1))/45369 - (7959328*HR(1, 1, 1, 1, -1, 1, om1))/45369 + (707222944*HR(1, 1, 1, 1, 0, -1, om1))/45369 + (4181188831*HR(1, 1, 1, 1, 0, 0, om1))/1088856 + (3061280*HR(1, 1, 1, 1, 1, -1, om1))/5041 + (25498178108029*HR(1, 1, 1, 1, 1, 1, om1))/68597928").unwrap() ),
        ( Atom::parse("D3bar(0)").unwrap(), Atom::parse("12*HR(1, 0, 1, 0, om1) - (2454*HR(1, 1, 1, 1, om1))/5").unwrap() ),
        ( Atom::parse("D3bar(1)").unwrap(), Atom::parse("-72*HR(1, 0, -1, 1, 0, om1) - 72*HR(1, 0, 1, -1, 0, om1) + 234*HR(1, 0, 1, 1, 1, om1) + (8565*HR(1, 1, 0, 1, 1, om1))/58 - (12469*HR(1, 1, 1, 0, 1, om1))/58 - (21182*HR(1, 1, 1, 1, 0, om1))/29").unwrap() ),
        ( Atom::parse("D3bar(2)").unwrap(), Atom::parse("432*HR(1, 0, -1, -1, 1, 0, om1) + 432*HR(1, 0, -1, 1, -1, 0, om1) - 1404*HR(1, 0, -1, 1, 1, 1, om1) + 432*HR(1, 0, 1, -1, -1, 1, om1) + 432*HR(1, 0, 1, -1, 1, -1, om1) + 288*HR(1, 0, 1, -1, 1, 0, om1) - 2268*HR(1, 0, 1, -1, 1, 1, om1) + 426*HR(1, 0, 1, 0, 1, 1, om1) + 864*HR(1, 0, 1, 1, -1, -1, om1) + 1008*HR(1, 0, 1, 1, -1, 0, om1) - 3564*HR(1, 0, 1, 1, -1, 1, om1) + (597*HR(1, 0, 1, 1, 0, 1, om1))/2 - 5292*HR(1, 0, 1, 1, 1, -1, om1) - (2997*HR(1, 0, 1, 1, 1, 0, om1))/2 - 1872*HR(1, 1, 0, -1, 1, 1, om1) + 864*HR(1, 1, 0, 1, -1, -1, om1) - (4434544*HR(1, 1, 0, 1, -1, 0, om1))/5041 - (10551648*HR(1, 1, 0, 1, -1, 1, om1))/5041 - (16021968*HR(1, 1, 0, 1, 1, -1, om1))/5041 + (2803488*HR(1, 1, 1, -1, -1, 0, om1))/5041 - (2803488*HR(1, 1, 1, -1, -1, 1, om1))/5041 - (1127840*HR(1, 1, 1, -1, 0, 0, om1))/5041 + (2030112*HR(1, 1, 1, -1, 0, 1, om1))/5041 - (2803488*HR(1, 1, 1, -1, 1, -1, om1))/5041 + (161120*HR(1, 1, 1, -1, 1, 0, om1))/5041 - (1063392*HR(1, 1, 1, -1, 1, 1, om1))/5041 - (28703376*HR(1, 1, 1, 0, -1, 0, om1))/5041 + (21068364*HR(1, 1, 1, 0, -1, 1, om1))/5041 - (64500970*HR(1, 1, 1, 0, 0, 1, om1))/45369 + (30789948*HR(1, 1, 1, 0, 1, -1, om1))/5041 + (171036689*HR(1, 1, 1, 0, 1, 0, om1))/45369 - (11213952*HR(1, 1, 1, 1, -1, -1, om1))/5041 - (4156896*HR(1, 1, 1, 1, -1, 0, om1))/5041 - (1256736*HR(1, 1, 1, 1, -1, 1, om1))/5041 + (112583712*HR(1, 1, 1, 1, 0, -1, om1))/5041 + (216348149*HR(1, 1, 1, 1, 0, 0, om1))/40328 + (4350240*HR(1, 1, 1, 1, 1, -1, om1))/5041 + (1158178961791*HR(1, 1, 1, 1, 1, 1, om1))/2540664").unwrap() ),
        ( Atom::parse("DMbar(0)").unwrap(), Atom::parse("8*HR(1, 0, 1, 0, om1) - 392*HR(1, 1, 1, 1, om1)").unwrap() ),
        ( Atom::parse("DMbar(1)").unwrap(), Atom::parse("-16*HR(1, 0, -1, 1, 0, om1) - 16*HR(1, 0, 1, -1, 0, om1) + 4*HR(1, 0, 1, 1, 1, om1) - (21209*HR(1, 1, 0, 1, 1, om1))/174 - (192041*HR(1, 1, 1, 0, 1, om1))/522 - (178807*HR(1, 1, 1, 1, 0, om1))/261").unwrap() ),
        ( Atom::parse("DMbar(2)").unwrap(), Atom::parse("32*HR(1, 0, -1, -1, 1, 0, om1) + 32*HR(1, 0, -1, 1, -1, 0, om1) - 8*HR(1, 0, -1, 1, 1, 1, om1) + 32*HR(1, 0, 1, -1, -1, 1, om1) + 32*HR(1, 0, 1, -1, 1, -1, om1) + (64*HR(1, 0, 1, -1, 1, 0, om1))/3 - 72*HR(1, 0, 1, -1, 1, 1, om1) - (148*HR(1, 0, 1, 0, 1, 1, om1))/9 + 64*HR(1, 0, 1, 1, -1, -1, om1) + (224*HR(1, 0, 1, 1, -1, 0, om1))/3 - 168*HR(1, 0, 1, 1, -1, 1, om1) - (1529*HR(1, 0, 1, 1, 0, 1, om1))/9 - 296*HR(1, 0, 1, 1, 1, -1, om1) - 479*HR(1, 0, 1, 1, 1, 0, om1) + (160*HR(1, 1, 0, -1, 1, 1, om1))/3 + 64*HR(1, 1, 0, 1, -1, -1, om1) - (8869088*HR(1, 1, 0, 1, -1, 0, om1))/136107 + (1676416*HR(1, 1, 0, 1, -1, 1, om1))/45369 - (1970464*HR(1, 1, 0, 1, 1, -1, om1))/45369 + (1868992*HR(1, 1, 1, -1, -1, 0, om1))/45369 - (1868992*HR(1, 1, 1, -1, -1, 1, om1))/45369 - (2255680*HR(1, 1, 1, -1, 0, 0, om1))/136107 + (451136*HR(1, 1, 1, -1, 0, 1, om1))/15123 - (1868992*HR(1, 1, 1, -1, 1, -1, om1))/45369 + (322240*HR(1, 1, 1, -1, 1, 0, om1))/136107 - (708928*HR(1, 1, 1, -1, 1, 1, om1))/45369 - (2126176*HR(1, 1, 1, 0, -1, 0, om1))/5041 + (27111848*HR(1, 1, 1, 0, -1, 1, om1))/45369 + (262986220*HR(1, 1, 1, 0, 0, 1, om1))/1224963 + (33592904*HR(1, 1, 1, 0, 1, -1, om1))/45369 + (1398989602*HR(1, 1, 1, 0, 1, 0, om1))/1224963 - (7475968*HR(1, 1, 1, 1, -1, -1, om1))/45369 - (2771264*HR(1, 1, 1, 1, -1, 0, om1))/45369 - (837824*HR(1, 1, 1, 1, -1, 1, om1))/45369 + (92477504*HR(1, 1, 1, 1, 0, -1, om1))/45369 + (49177327*HR(1, 1, 1, 1, 0, 0, om1))/20164 + (322240*HR(1, 1, 1, 1, 1, -1, om1))/5041 + (5318919501463*HR(1, 1, 1, 1, 1, 1, om1))/34298964").unwrap() ),
        ( Atom::parse("DNbar(0)").unwrap(), Atom::parse("(-72*HR(1, -1, 1, 0, om1))/11 + (180*HR(1, -1, 1, 1, om1))/11 + (60*HR(1, 0, 1, 0, om1))/11 - (144*HR(1, 1, -1, 0, om1))/11 + (360*HR(1, 1, -1, 1, om1))/11 + (540*HR(1, 1, 1, -1, om1))/11 - (10839*HR(1, 1, 1, 1, om1))/55").unwrap() ),
        ( Atom::parse("DNbar(1)").unwrap(), Atom::parse("(-328*HR(1, 1, -1, 0, 0, om1))/29 + (428*HR(1, 1, -1, 0, 1, om1))/29 + (428*HR(1, 1, -1, 1, 0, om1))/29 - (528*HR(1, 1, -1, 1, 1, om1))/29 - (451079*HR(1, 1, 0, 1, 1, om1))/5046 + (1684*HR(1, 1, 1, -1, 0, om1))/29 - (2184*HR(1, 1, 1, -1, 1, om1))/29 - (4056811*HR(1, 1, 1, 0, 1, om1))/15138 - 192*HR(1, 1, 1, 1, -1, om1) - (3533174*HR(1, 1, 1, 1, 0, om1))/7569").unwrap() ),
        ( Atom::parse("DNbar(2)").unwrap(), Atom::parse("(-232020872*HR(1, 1, 0, 1, -1, 0, om1))/35287 + (242178240*HR(1, 1, 0, 1, -1, 1, om1))/35287 + (484356480*HR(1, 1, 0, 1, 1, -1, om1))/35287 + (110839452*HR(1, 1, 1, -1, -1, 0, om1))/35287 - (110839452*HR(1, 1, 1, -1, -1, 1, om1))/35287 - (6313068*HR(1, 1, 1, -1, 0, 0, om1))/5041 + (11391752*HR(1, 1, 1, -1, 0, 1, om1))/5041 - (110839452*HR(1, 1, 1, -1, 1, -1, om1))/35287 + (5849296*HR(1, 1, 1, -1, 1, 0, om1))/35287 - (41400084*HR(1, 1, 1, -1, 1, 1, om1))/35287 - (691680096*HR(1, 1, 1, 0, -1, 0, om1))/35287 + (103164600*HR(1, 1, 1, 0, -1, 1, om1))/5041 - (321226763*HR(1, 1, 1, 0, 0, 1, om1))/317583 + (1448686920*HR(1, 1, 1, 0, 1, -1, om1))/35287 - (347521883*HR(1, 1, 1, 0, 1, 0, om1))/317583 - (443357808*HR(1, 1, 1, 1, -1, -1, om1))/35287 - (166918020*HR(1, 1, 1, 1, -1, 0, om1))/35287 - (46386708*HR(1, 1, 1, 1, -1, 1, om1))/35287 + (412658400*HR(1, 1, 1, 1, 0, -1, om1))/5041 - (3381227415*HR(1, 1, 1, 1, 0, 0, om1))/282296 + (182067300*HR(1, 1, 1, 1, 1, -1, om1))/35287 + (21952587521807*HR(1, 1, 1, 1, 1, 1, om1))/17784648").unwrap() ),
        ( Atom::parse("E3bar(-1)").unwrap(), Atom::parse("6*HI(1, 0, om1)").unwrap() ),
        ( Atom::parse("E3bar(0)").unwrap(), Atom::parse("-12*HI(-1, 1, 0, om1) - 12*HI(1, -1, 0, om1) + 3*HI(1, 1, 1, om1)").unwrap() ),
        ( Atom::parse("E3bar(1)").unwrap(), Atom::parse("24*HI(-1, -1, 1, 0, om1) + 24*HI(-1, 1, -1, 0, om1) - 6*HI(-1, 1, 1, 1, om1) + 24*HI(1, -1, -1, 1, om1) + 24*HI(1, -1, 1, -1, om1) + 16*HI(1, -1, 1, 0, om1) - 54*HI(1, -1, 1, 1, om1) - (37*HI(1, 0, 1, 1, om1))/3 + 48*HI(1, 1, -1, -1, om1) + 56*HI(1, 1, -1, 0, om1) - 126*HI(1, 1, -1, 1, om1) - (1529*HI(1, 1, 0, 1, om1))/12 - 222*HI(1, 1, 1, -1, om1) - (1437*HI(1, 1, 1, 0, om1))/4").unwrap() ),
        ( Atom::parse("E3bar(2)").unwrap(), Atom::parse("-48*HI(-1, -1, -1, 1, 0, om1) - 48*HI(-1, -1, 1, -1, 0, om1) + 12*HI(-1, -1, 1, 1, 1, om1) - 48*HI(-1, 1, -1, -1, 1, om1) - 48*HI(-1, 1, -1, 1, -1, om1) - 32*HI(-1, 1, -1, 1, 0, om1) + 108*HI(-1, 1, -1, 1, 1, om1) + (74*HI(-1, 1, 0, 1, 1, om1))/3 - 96*HI(-1, 1, 1, -1, -1, om1) - 112*HI(-1, 1, 1, -1, 0, om1) + 252*HI(-1, 1, 1, -1, 1, om1) + (1529*HI(-1, 1, 1, 0, 1, om1))/6 + 444*HI(-1, 1, 1, 1, -1, om1) + (1437*HI(-1, 1, 1, 1, 0, om1))/2 - 48*HI(1, -1, -1, -1, 1, om1) - 48*HI(1, -1, -1, 1, -1, om1) - 32*HI(1, -1, -1, 1, 0, om1) - 112*HI(1, -1, 1, -1, 0, om1) + 96*HI(1, -1, 1, -1, 1, om1) - 80*HI(1, -1, 1, 0, -1, om1) + 144*HI(1, -1, 1, 1, -1, om1) + (11841*HI(1, -1, 1, 1, 1, om1))/4 + 90*HI(1, 0, -1, 1, 1, om1) - 80*HI(1, 0, 1, -1, -1, om1) + 130*HI(1, 0, 1, -1, 1, om1) + (8105*HI(1, 0, 1, 0, 1, om1))/36 + 250*HI(1, 0, 1, 1, -1, om1) + (21503*HI(1, 0, 1, 1, 0, om1))/36 + 96*HI(1, 1, -1, -1, -1, om1) - 172*HI(1, 1, -1, -1, 1, om1) + (1725367*HI(1, 1, -1, 0, 0, om1))/4161 - (412061*HI(1, 1, -1, 0, 1, om1))/8322 - 268*HI(1, 1, -1, 1, -1, om1) - (1334797*HI(1, 1, -1, 1, 0, om1))/2774 + (14659325*HI(1, 1, -1, 1, 1, om1))/2774 + (771*HI(1, 1, 0, -1, 1, om1))/2 - (5253406*HI(1, 1, 0, 0, -1, om1))/12483 + (1081050*HI(1, 1, 0, 1, -1, om1))/1387 - 1112*HI(1, 1, 1, -1, -1, om1) - (1316324*HI(1, 1, 1, -1, 0, om1))/1387 + (40815981*HI(1, 1, 1, -1, 1, om1))/5548 + (1357934*HI(1, 1, 1, 0, -1, om1))/657 - (1768682807*HI(1, 1, 1, 0, 0, om1))/898776 + (14459841*HI(1, 1, 1, 1, -1, om1))/1387 - (3591211175*HI(1, 1, 1, 1, 1, om1))/112347").unwrap() ),
        ( Atom::parse("E3bar(3)").unwrap(), Atom::parse("96*HI(-1, -1, -1, -1, 1, 0, om1) + 96*HI(-1, -1, -1, 1, -1, 0, om1) - 24*HI(-1, -1, -1, 1, 1, 1, om1) + 96*HI(-1, -1, 1, -1, -1, 1, om1) + 96*HI(-1, -1, 1, -1, 1, -1, om1) + 64*HI(-1, -1, 1, -1, 1, 0, om1) - 216*HI(-1, -1, 1, -1, 1, 1, om1) - (148*HI(-1, -1, 1, 0, 1, 1, om1))/3 + 192*HI(-1, -1, 1, 1, -1, -1, om1) + 224*HI(-1, -1, 1, 1, -1, 0, om1) - 504*HI(-1, -1, 1, 1, -1, 1, om1) - (1529*HI(-1, -1, 1, 1, 0, 1, om1))/3 - 888*HI(-1, -1, 1, 1, 1, -1, om1) - 1437*HI(-1, -1, 1, 1, 1, 0, om1) + 96*HI(-1, 1, -1, -1, -1, 1, om1) + 96*HI(-1, 1, -1, -1, 1, -1, om1) + 64*HI(-1, 1, -1, -1, 1, 0, om1) + 224*HI(-1, 1, -1, 1, -1, 0, om1) - 192*HI(-1, 1, -1, 1, -1, 1, om1) + 160*HI(-1, 1, -1, 1, 0, -1, om1) - 288*HI(-1, 1, -1, 1, 1, -1, om1) - (11841*HI(-1, 1, -1, 1, 1, 1, om1))/2 - 180*HI(-1, 1, 0, -1, 1, 1, om1) + 160*HI(-1, 1, 0, 1, -1, -1, om1) - 260*HI(-1, 1, 0, 1, -1, 1, om1) - (8105*HI(-1, 1, 0, 1, 0, 1, om1))/18 - 500*HI(-1, 1, 0, 1, 1, -1, om1) - (21503*HI(-1, 1, 0, 1, 1, 0, om1))/18 - 192*HI(-1, 1, 1, -1, -1, -1, om1) + 344*HI(-1, 1, 1, -1, -1, 1, om1) - (3450734*HI(-1, 1, 1, -1, 0, 0, om1))/4161 + (412061*HI(-1, 1, 1, -1, 0, 1, om1))/4161 + 536*HI(-1, 1, 1, -1, 1, -1, om1) + (1334797*HI(-1, 1, 1, -1, 1, 0, om1))/1387 - (14659325*HI(-1, 1, 1, -1, 1, 1, om1))/1387 - 771*HI(-1, 1, 1, 0, -1, 1, om1) + (10506812*HI(-1, 1, 1, 0, 0, -1, om1))/12483 - (2162100*HI(-1, 1, 1, 0, 1, -1, om1))/1387 + 2224*HI(-1, 1, 1, 1, -1, -1, om1) + (2632648*HI(-1, 1, 1, 1, -1, 0, om1))/1387 - (40815981*HI(-1, 1, 1, 1, -1, 1, om1))/2774 - (2715868*HI(-1, 1, 1, 1, 0, -1, om1))/657 + (1768682807*HI(-1, 1, 1, 1, 0, 0, om1))/449388 - (28919682*HI(-1, 1, 1, 1, 1, -1, om1))/1387 + (7182422350*HI(-1, 1, 1, 1, 1, 1, om1))/112347 + 96*HI(1, -1, -1, -1, -1, 1, om1) + 96*HI(1, -1, -1, -1, 1, -1, om1) + 64*HI(1, -1, -1, -1, 1, 0, om1) + 224*HI(1, -1, -1, 1, -1, 0, om1) - 192*HI(1, -1, -1, 1, -1, 1, om1) + 160*HI(1, -1, -1, 1, 0, -1, om1) - 288*HI(1, -1, -1, 1, 1, -1, om1) - (11841*HI(1, -1, -1, 1, 1, 1, om1))/2 + 248*HI(1, -1, 1, -1, -1, 1, om1) + 440*HI(1, -1, 1, -1, 1, -1, om1) + (2590*HI(1, -1, 1, -1, 1, 0, om1))/3 - 10608*HI(1, -1, 1, -1, 1, 1, om1) - 320*HI(1, -1, 1, 0, -1, -1, om1) - (759843*HI(1, -1, 1, 0, 1, -1, om1))/1387 + (13919645*HI(1, -1, 1, 0, 1, 1, om1))/12483 + 1520*HI(1, -1, 1, 1, -1, -1, om1) + (7073822*HI(1, -1, 1, 1, -1, 0, om1))/4161 - (40321721*HI(1, -1, 1, 1, -1, 1, om1))/2774 + (6271329955*HI(1, -1, 1, 1, 0, 1, om1))/898776 - (26862395*HI(1, -1, 1, 1, 1, -1, om1))/1387 + (6038799457*HI(1, -1, 1, 1, 1, 0, om1))/299592 - 160*HI(1, 0, 1, -1, -1, -1, om1) - (277814945*HI(1, 0, 1, -1, 1, 0, om1))/137313 + (212581060*HI(1, 0, 1, -1, 1, 1, om1))/45771 - (585*HI(1, 0, 1, 0, -1, 1, om1))/2 - (585*HI(1, 0, 1, 0, 1, -1, om1))/2 + (2272287250*HI(1, 0, 1, 0, 1, 0, om1))/1235817 + (1280*HI(1, 0, 1, 1, -1, -1, om1))/3 - (221375860*HI(1, 0, 1, 1, -1, 0, om1))/137313 + (4419865*HI(1, 0, 1, 1, -1, 1, om1))/803 - (2624160*HI(1, 0, 1, 1, 0, -1, om1))/1387 + (86319175*HI(1, 0, 1, 1, 1, -1, om1))/45771 - (7230866663213*HI(1, 0, 1, 1, 1, 1, om1))/74149020 + 192*HI(1, 1, -1, -1, -1, -1, om1) + 152*HI(1, 1, -1, -1, -1, 1, om1) + 344*HI(1, 1, -1, -1, 1, -1, om1) + (2590*HI(1, 1, -1, -1, 1, 0, om1))/3 - (30479*HI(1, 1, -1, -1, 1, 1, om1))/3 - (426963*HI(1, 1, -1, 0, 1, -1, om1))/1387 + 944*HI(1, 1, -1, 1, -1, -1, om1) + 1601*HI(1, 1, -1, 1, -1, 0, om1) - (83605*HI(1, 1, -1, 1, -1, 1, om1))/6 + (2419561*HI(1, 1, -1, 1, 0, -1, om1))/657 + (837579887*HI(1, 1, -1, 1, 0, 1, om1))/112347 - (73453112*HI(1, 1, -1, 1, 1, -1, om1))/4161 + (24602317907*HI(1, 1, -1, 1, 1, 0, om1))/898776 - (2981940259*HI(1, 1, -1, 1, 1, 1, om1))/224694 - 571*HI(1, 1, 0, -1, -1, 1, om1) - (1218940*HI(1, 1, 0, -1, 1, -1, om1))/1387 - (1284799676*HI(1, 1, 0, -1, 1, 0, om1))/411939 + (172606885810943423*HI(1, 1, 0, 1, -1, -1, om1))/31412461173192 + (330844112035157*HI(1, 1, 0, 1, -1, 0, om1))/387808162632 - (335938955928166355*HI(1, 1, 0, 1, -1, 1, om1))/62824922346384 - (9666835700761579*HI(1, 1, 0, 1, 1, -1, om1))/296343973332 - 784*HI(1, 1, 1, -1, -1, -1, om1) + (32163144510925889*HI(1, 1, 1, -1, -1, 0, om1))/1903785525648 - (52473680391301577*HI(1, 1, 1, -1, -1, 1, om1))/1903785525648 + (910517365657338137*HI(1, 1, 1, -1, 0, -1, om1))/62824922346384 + (263100146907443657*HI(1, 1, 1, -1, 0, 0, om1))/17134069730832 - (46280134588267057*HI(1, 1, 1, -1, 0, 1, om1))/188474767039152 - (57799520399301857*HI(1, 1, 1, -1, 1, -1, om1))/1903785525648 + (931530505381579307*HI(1, 1, 1, -1, 1, 0, om1))/62824922346384 + (1778265423341603573*HI(1, 1, 1, -1, 1, 1, om1))/62824922346384 + (161624158645205183*HI(1, 1, 1, 0, -1, -1, om1))/10470820391064 - (67738084863003155*HI(1, 1, 1, 0, -1, 0, om1))/5235410195532 - (25709636977147441*HI(1, 1, 1, 0, -1, 1, om1))/2326848975792 - (1201750627073139241*HI(1, 1, 1, 0, 0, -1, om1))/205608836769984 + (37123461223687789039459901*HI(1, 1, 1, 0, 0, 0, om1))/489612210823627499520 - (15065768752177753*HI(1, 1, 1, 0, 1, -1, om1))/183698603352 + (5890725611419818825578737*HI(1, 1, 1, 0, 1, 1, om1))/25769063727559342080 - (2641792499452155803*HI(1, 1, 1, 1, -1, -1, om1))/31412461173192 - (232062550415237737*HI(1, 1, 1, 1, -1, 0, om1))/3306574860336 + (709822530971820472*HI(1, 1, 1, 1, -1, 1, om1))/3926557646649 - (114034845156029701411*HI(1, 1, 1, 1, 0, -1, om1))/1130848602234912 + (497108468757262704945911459*HI(1, 1, 1, 1, 0, 1, om1))/979224421647254999040 + (19072578396451593155*HI(1, 1, 1, 1, 1, -1, om1))/31412461173192 + (160662586785011672453801383*HI(1, 1, 1, 1, 1, 0, om1))/326408140549084999680").unwrap() ),
        ( Atom::parse("BNbar(1)").unwrap(), Atom::parse("112*HR(1, 1, 0, om1)").unwrap() ),
        ( Atom::parse("BNbar(2)").unwrap(), Atom::parse("(-2304*HR(1, -1, 1, 0, om1))/11 + (5760*HR(1, -1, 1, 1, om1))/11 + (1920*HR(1, 0, 1, 0, om1))/11 - (4608*HR(1, 1, -1, 0, om1))/11 + (11520*HR(1, 1, -1, 1, om1))/11 + (17280*HR(1, 1, 1, -1, om1))/11 - (593952*HR(1, 1, 1, 1, om1))/55").unwrap() ),
        ( Atom::parse("BNbar(3)").unwrap(), Atom::parse("(-36864*HR(1, 1, -1, 0, 0, om1))/29 + (52992*HR(1, 1, -1, 0, 1, om1))/29 + (52992*HR(1, 1, -1, 1, 0, om1))/29 - (69120*HR(1, 1, -1, 1, 1, om1))/29 - (3282240*HR(1, 1, 0, 1, 1, om1))/841 + (223488*HR(1, 1, 1, -1, 0, om1))/29 - (304128*HR(1, 1, 1, -1, 1, om1))/29 - (9820736*HR(1, 1, 1, 0, 1, om1))/841 - 27648*HR(1, 1, 1, 1, -1, om1) - (19524608*HR(1, 1, 1, 1, 0, om1))/841").unwrap() ),
        ( Atom::parse("BNbar(4)").unwrap(), Atom::parse("(-1303119360*HR(1, 1, 0, 1, -1, 0, om1))/5041 + (1354682880*HR(1, 1, 0, 1, -1, 1, om1))/5041 + (2709365760*HR(1, 1, 0, 1, 1, -1, om1))/5041 + (613018368*HR(1, 1, 1, -1, -1, 0, om1))/5041 - (613018368*HR(1, 1, 1, -1, -1, 1, om1))/5041 - (208168704*HR(1, 1, 1, -1, 0, 0, om1))/5041 + (388641024*HR(1, 1, 1, -1, 0, 1, om1))/5041 - (613018368*HR(1, 1, 1, -1, 1, -1, om1))/5041 - (20037888*HR(1, 1, 1, -1, 1, 0, om1))/5041 - (160434432*HR(1, 1, 1, -1, 1, 1, om1))/5041 - (3867098112*HR(1, 1, 1, 0, -1, 0, om1))/5041 + (4021788672*HR(1, 1, 1, 0, -1, 1, om1))/5041 - (181188480*HR(1, 1, 1, 0, 0, 1, om1))/5041 + (8085837312*HR(1, 1, 1, 0, 1, -1, om1))/5041 - (209361792*HR(1, 1, 1, 0, 1, 0, om1))/5041 - (2452073472*HR(1, 1, 1, 1, -1, -1, om1))/5041 - (1197317376*HR(1, 1, 1, 1, -1, 0, om1))/5041 + (114483456*HR(1, 1, 1, 1, -1, 1, om1))/5041 + (16087154688*HR(1, 1, 1, 1, 0, -1, om1))/5041 - (2378746336*HR(1, 1, 1, 1, 0, 0, om1))/5041 + (2176761600*HR(1, 1, 1, 1, 1, -1, om1))/5041 + (249395302624*HR(1, 1, 1, 1, 1, 1, om1))/5041").unwrap() ),
        ( Atom::parse("BN1bar(0)").unwrap(), Atom::parse("4*HI(1, 0, om1)").unwrap() ),
        ( Atom::parse("BN1bar(1)").unwrap(), Atom::parse("-24*HI(-1, 1, 0, om1) - 24*HI(1, -1, 0, om1) + 78*HI(1, 1, 1, om1)").unwrap() ),
        ( Atom::parse("BN1bar(2)").unwrap(), Atom::parse("144*HI(-1, -1, 1, 0, om1) + 144*HI(-1, 1, -1, 0, om1) - 468*HI(-1, 1, 1, 1, om1) + 144*HI(1, -1, -1, 1, om1) + 144*HI(1, -1, 1, -1, om1) + 96*HI(1, -1, 1, 0, om1) - 756*HI(1, -1, 1, 1, om1) + 142*HI(1, 0, 1, 1, om1) + 288*HI(1, 1, -1, -1, om1) + 336*HI(1, 1, -1, 0, om1) - 1188*HI(1, 1, -1, 1, om1) + (199*HI(1, 1, 0, 1, om1))/2 - 1764*HI(1, 1, 1, -1, om1) - (999*HI(1, 1, 1, 0, om1))/2").unwrap() ),
        ( Atom::parse("BN1bar(3)").unwrap(), Atom::parse("-864*HI(-1, -1, -1, 1, 0, om1) - 864*HI(-1, -1, 1, -1, 0, om1) + 2808*HI(-1, -1, 1, 1, 1, om1) - 864*HI(-1, 1, -1, -1, 1, om1) - 864*HI(-1, 1, -1, 1, -1, om1) - 576*HI(-1, 1, -1, 1, 0, om1) + 4536*HI(-1, 1, -1, 1, 1, om1) - 852*HI(-1, 1, 0, 1, 1, om1) - 1728*HI(-1, 1, 1, -1, -1, om1) - 2016*HI(-1, 1, 1, -1, 0, om1) + 7128*HI(-1, 1, 1, -1, 1, om1) - 597*HI(-1, 1, 1, 0, 1, om1) + 10584*HI(-1, 1, 1, 1, -1, om1) + 2997*HI(-1, 1, 1, 1, 0, om1) - 864*HI(1, -1, -1, -1, 1, om1) - 864*HI(1, -1, -1, 1, -1, om1) - 576*HI(1, -1, -1, 1, 0, om1) - 2016*HI(1, -1, 1, -1, 0, om1) + 1728*HI(1, -1, 1, -1, 1, om1) - 1440*HI(1, -1, 1, 0, -1, om1) + 2592*HI(1, -1, 1, 1, -1, om1) + (41337*HI(1, -1, 1, 1, 1, om1))/2 + 3780*HI(1, 0, -1, 1, 1, om1) - 1440*HI(1, 0, 1, -1, -1, om1) + 4500*HI(1, 0, 1, -1, 1, om1) + (1625*HI(1, 0, 1, 0, 1, om1))/2 + 6660*HI(1, 0, 1, 1, -1, om1) + (5903*HI(1, 0, 1, 1, 0, om1))/2 + 1728*HI(1, 1, -1, -1, -1, om1) - 5688*HI(1, 1, -1, -1, 1, om1) + (3566346*HI(1, 1, -1, 0, 0, om1))/1387 + (2763273*HI(1, 1, -1, 0, 1, om1))/1387 - 7416*HI(1, 1, -1, 1, -1, om1) - (1422693*HI(1, 1, -1, 1, 0, om1))/1387 + (54624501*HI(1, 1, -1, 1, 1, om1))/1387 + 8667*HI(1, 1, 0, -1, 1, om1) - (5422460*HI(1, 1, 0, 0, -1, om1))/1387 + (17237556*HI(1, 1, 0, 1, -1, om1))/1387 - 25200*HI(1, 1, 1, -1, -1, om1) - (5703624*HI(1, 1, 1, -1, 0, om1))/1387 + (174917637*HI(1, 1, 1, -1, 1, om1))/2774 + (1624492*HI(1, 1, 1, 0, -1, om1))/73 - (400772087*HI(1, 1, 1, 0, 0, om1))/49932 + (158327730*HI(1, 1, 1, 1, -1, om1))/1387 - (3279409000*HI(1, 1, 1, 1, 1, om1))/12483").unwrap() ),
        ( Atom::parse("BN1bar(4)").unwrap(), Atom::parse("5184*HI(-1, -1, -1, -1, 1, 0, om1) + 5184*HI(-1, -1, -1, 1, -1, 0, om1) - 16848*HI(-1, -1, -1, 1, 1, 1, om1) + 5184*HI(-1, -1, 1, -1, -1, 1, om1) + 5184*HI(-1, -1, 1, -1, 1, -1, om1) + 3456*HI(-1, -1, 1, -1, 1, 0, om1) - 27216*HI(-1, -1, 1, -1, 1, 1, om1) + 5112*HI(-1, -1, 1, 0, 1, 1, om1) + 10368*HI(-1, -1, 1, 1, -1, -1, om1) + 12096*HI(-1, -1, 1, 1, -1, 0, om1) - 42768*HI(-1, -1, 1, 1, -1, 1, om1) + 3582*HI(-1, -1, 1, 1, 0, 1, om1) - 63504*HI(-1, -1, 1, 1, 1, -1, om1) - 17982*HI(-1, -1, 1, 1, 1, 0, om1) + 5184*HI(-1, 1, -1, -1, -1, 1, om1) + 5184*HI(-1, 1, -1, -1, 1, -1, om1) + 3456*HI(-1, 1, -1, -1, 1, 0, om1) + 12096*HI(-1, 1, -1, 1, -1, 0, om1) - 10368*HI(-1, 1, -1, 1, -1, 1, om1) + 8640*HI(-1, 1, -1, 1, 0, -1, om1) - 15552*HI(-1, 1, -1, 1, 1, -1, om1) - 124011*HI(-1, 1, -1, 1, 1, 1, om1) - 22680*HI(-1, 1, 0, -1, 1, 1, om1) + 8640*HI(-1, 1, 0, 1, -1, -1, om1) - 27000*HI(-1, 1, 0, 1, -1, 1, om1) - 4875*HI(-1, 1, 0, 1, 0, 1, om1) - 39960*HI(-1, 1, 0, 1, 1, -1, om1) - 17709*HI(-1, 1, 0, 1, 1, 0, om1) - 10368*HI(-1, 1, 1, -1, -1, -1, om1) + 34128*HI(-1, 1, 1, -1, -1, 1, om1) - (21398076*HI(-1, 1, 1, -1, 0, 0, om1))/1387 - (16579638*HI(-1, 1, 1, -1, 0, 1, om1))/1387 + 44496*HI(-1, 1, 1, -1, 1, -1, om1) + (8536158*HI(-1, 1, 1, -1, 1, 0, om1))/1387 - (327747006*HI(-1, 1, 1, -1, 1, 1, om1))/1387 - 52002*HI(-1, 1, 1, 0, -1, 1, om1) + (32534760*HI(-1, 1, 1, 0, 0, -1, om1))/1387 - (103425336*HI(-1, 1, 1, 0, 1, -1, om1))/1387 + 151200*HI(-1, 1, 1, 1, -1, -1, om1) + (34221744*HI(-1, 1, 1, 1, -1, 0, om1))/1387 - (524752911*HI(-1, 1, 1, 1, -1, 1, om1))/1387 - (9746952*HI(-1, 1, 1, 1, 0, -1, om1))/73 + (400772087*HI(-1, 1, 1, 1, 0, 0, om1))/8322 - (949966380*HI(-1, 1, 1, 1, 1, -1, om1))/1387 + (6558818000*HI(-1, 1, 1, 1, 1, 1, om1))/4161 + 5184*HI(1, -1, -1, -1, -1, 1, om1) + 5184*HI(1, -1, -1, -1, 1, -1, om1) + 3456*HI(1, -1, -1, -1, 1, 0, om1) + 12096*HI(1, -1, -1, 1, -1, 0, om1) - 10368*HI(1, -1, -1, 1, -1, 1, om1) + 8640*HI(1, -1, -1, 1, 0, -1, om1) - 15552*HI(1, -1, -1, 1, 1, -1, om1) - 124011*HI(1, -1, -1, 1, 1, 1, om1) + 28944*HI(1, -1, 1, -1, -1, 1, om1) + 39312*HI(1, -1, 1, -1, 1, -1, om1) + 18108*HI(1, -1, 1, -1, 1, 0, om1) - 290304*HI(1, -1, 1, -1, 1, 1, om1) - 17280*HI(1, -1, 1, 0, -1, -1, om1) - (13323042*HI(1, -1, 1, 0, 1, -1, om1))/1387 + (34731966*HI(1, -1, 1, 0, 1, 1, om1))/1387 + 113184*HI(1, -1, 1, 1, -1, -1, om1) + (67381020*HI(1, -1, 1, 1, -1, 0, om1))/1387 - (655388307*HI(1, -1, 1, 1, -1, 1, om1))/1387 + (1961738995*HI(1, -1, 1, 1, 0, 1, om1))/16644 - (1054843506*HI(1, -1, 1, 1, 1, -1, om1))/1387 + (1636490353*HI(1, -1, 1, 1, 1, 0, om1))/5548 - 8640*HI(1, 0, 1, -1, -1, -1, om1) - (1057484550*HI(1, 0, 1, -1, 1, 0, om1))/15257 + (2896138440*HI(1, 0, 1, -1, 1, 1, om1))/15257 - 13635*HI(1, 0, 1, 0, -1, 1, om1) - 13635*HI(1, 0, 1, 0, 1, -1, om1) + (2536761620*HI(1, 0, 1, 0, 1, 0, om1))/45771 + 23040*HI(1, 0, 1, 1, -1, -1, om1) - (722452920*HI(1, 0, 1, 1, -1, 0, om1))/15257 + (189139590*HI(1, 0, 1, 1, -1, 1, om1))/803 - (73887840*HI(1, 0, 1, 1, 0, -1, om1))/1387 + (1521319230*HI(1, 0, 1, 1, 1, -1, om1))/15257 - (1739984020721*HI(1, 0, 1, 1, 1, 1, om1))/1373130 + 10368*HI(1, 1, -1, -1, -1, -1, om1) + 23760*HI(1, 1, -1, -1, -1, 1, om1) + 34128*HI(1, 1, -1, -1, 1, -1, om1) + 18108*HI(1, 1, -1, -1, 1, 0, om1) - 323118*HI(1, 1, -1, -1, 1, 1, om1) + (4652478*HI(1, 1, -1, 0, 1, -1, om1))/1387 + 82080*HI(1, 1, -1, 1, -1, -1, om1) + 60534*HI(1, 1, -1, 1, -1, 0, om1) - 548973*HI(1, 1, -1, 1, -1, 1, om1) + (7212246*HI(1, 1, -1, 1, 0, -1, om1))/73 + (499549318*HI(1, 1, -1, 1, 0, 1, om1))/4161 - (1149502896*HI(1, 1, -1, 1, 1, -1, om1))/1387 + (6314678771*HI(1, 1, -1, 1, 1, 0, om1))/16644 - (3100825687*HI(1, 1, -1, 1, 1, 1, om1))/4161 - 15282*HI(1, 1, 0, -1, -1, 1, om1) - (16543656*HI(1, 1, 0, -1, 1, -1, om1))/1387 - (1961940664*HI(1, 1, 0, -1, 1, 0, om1))/15257 + (64895701668594431*HI(1, 1, 0, 1, -1, -1, om1))/581712243948 - (1378601274793377*HI(1, 1, 0, 1, -1, 0, om1))/21544897924 + (125263181337378061*HI(1, 1, 0, 1, -1, 1, om1))/1163424487896 - (1211150098669531*HI(1, 1, 0, 1, 1, -1, om1))/5487851358 - 11232*HI(1, 1, 1, -1, -1, -1, om1) + (2392665851955041*HI(1, 1, 1, -1, -1, 0, om1))/35255287512 - (20464349954168681*HI(1, 1, 1, -1, -1, 1, om1))/35255287512 + (189472199905473497*HI(1, 1, 1, -1, 0, -1, om1))/1163424487896 + (47207116920801641*HI(1, 1, 1, -1, 0, 0, om1))/317297587608 - (298649341166732401*HI(1, 1, 1, -1, 0, 1, om1))/3490273463688 - (30404966076339713*HI(1, 1, 1, -1, 1, -1, om1))/35255287512 + (181778915331736427*HI(1, 1, 1, -1, 1, 0, om1))/1163424487896 - (366128024895147883*HI(1, 1, 1, -1, 1, 1, om1))/1163424487896 + (53912974502856191*HI(1, 1, 1, 0, -1, -1, om1))/193904081316 - (10304731594730675*HI(1, 1, 1, 0, -1, 0, om1))/96952040658 - (16995388457766673*HI(1, 1, 1, 0, -1, 1, om1))/43089795848 + (186908888125819415*HI(1, 1, 1, 0, 0, -1, om1))/3807571051296 + (10276798443600238610374397*HI(1, 1, 1, 0, 0, 0, om1))/9066892793030138880 - (3306662120409625*HI(1, 1, 1, 0, 1, -1, om1))/3401825988 + (1299407259007733189665969*HI(1, 1, 1, 0, 1, 1, om1))/477204883843691520 - (384757595682873755*HI(1, 1, 1, 1, -1, -1, om1))/581712243948 - (30219787275121801*HI(1, 1, 1, 1, -1, 0, om1))/61232867784 + (228583496909607344*HI(1, 1, 1, 1, -1, 1, om1))/145428060987 - (44409253854794826595*HI(1, 1, 1, 1, 0, -1, om1))/20941640782128 + (111015775290234750628966883*HI(1, 1, 1, 1, 0, 1, om1))/18133785586060277760 + (2811281629788118067*HI(1, 1, 1, 1, 1, -1, om1))/581712243948 + (35725379481317601118816231*HI(1, 1, 1, 1, 1, 0, om1))/6044595195353425920").unwrap() ),
        ( Atom::parse("T111bar(0)").unwrap(), Atom::parse("6*HI(1, 0, om1)").unwrap() ),
        ( Atom::parse("T111bar(1)").unwrap(), Atom::parse("-12*HI(-1, 1, 0, om1) - 12*HI(1, -1, 0, om1) + 39*HI(1, 1, 1, om1)").unwrap() ),
        ( Atom::parse("T111bar(2)").unwrap(), Atom::parse("24*HI(-1, -1, 1, 0, om1) + 24*HI(-1, 1, -1, 0, om1) - 78*HI(-1, 1, 1, 1, om1) + 24*HI(1, -1, -1, 1, om1) + 24*HI(1, -1, 1, -1, om1) + 16*HI(1, -1, 1, 0, om1) - 126*HI(1, -1, 1, 1, om1) + (80*HI(1, 0, 1, 1, om1))/3 + 48*HI(1, 1, -1, -1, om1) + 56*HI(1, 1, -1, 0, om1) - 198*HI(1, 1, -1, 1, om1) + (127*HI(1, 1, 0, 1, om1))/12 - 294*HI(1, 1, 1, -1, om1) - (409*HI(1, 1, 1, 0, om1))/4").unwrap() ),
        ( Atom::parse("T111bar(3)").unwrap(), Atom::parse("-48*HI(-1, -1, -1, 1, 0, om1) - 48*HI(-1, -1, 1, -1, 0, om1) + 156*HI(-1, -1, 1, 1, 1, om1) - 48*HI(-1, 1, -1, -1, 1, om1) - 48*HI(-1, 1, -1, 1, -1, om1) - 32*HI(-1, 1, -1, 1, 0, om1) + 252*HI(-1, 1, -1, 1, 1, om1) - (160*HI(-1, 1, 0, 1, 1, om1))/3 - 96*HI(-1, 1, 1, -1, -1, om1) - 112*HI(-1, 1, 1, -1, 0, om1) + 396*HI(-1, 1, 1, -1, 1, om1) - (127*HI(-1, 1, 1, 0, 1, om1))/6 + 588*HI(-1, 1, 1, 1, -1, om1) + (409*HI(-1, 1, 1, 1, 0, om1))/2 - 48*HI(1, -1, -1, -1, 1, om1) - 48*HI(1, -1, -1, 1, -1, om1) - 32*HI(1, -1, -1, 1, 0, om1) - 112*HI(1, -1, 1, -1, 0, om1) + 96*HI(1, -1, 1, -1, 1, om1) - 80*HI(1, -1, 1, 0, -1, om1) + 144*HI(1, -1, 1, 1, -1, om1) + (5189*HI(1, -1, 1, 1, 1, om1))/4 + 210*HI(1, 0, -1, 1, 1, om1) - 80*HI(1, 0, 1, -1, -1, om1) + 250*HI(1, 0, 1, -1, 1, om1) + (2165*HI(1, 0, 1, 0, 1, om1))/36 + 370*HI(1, 0, 1, 1, -1, om1) + (7235*HI(1, 0, 1, 1, 0, om1))/36 + 96*HI(1, 1, -1, -1, -1, om1) - 316*HI(1, 1, -1, -1, 1, om1) + (634711*HI(1, 1, -1, 0, 0, om1))/4161 + (1001731*HI(1, 1, -1, 0, 1, om1))/8322 - 412*HI(1, 1, -1, 1, -1, om1) - (203321*HI(1, 1, -1, 1, 0, om1))/2774 + (6715537*HI(1, 1, -1, 1, 1, om1))/2774 + (1011*HI(1, 1, 0, -1, 1, om1))/2 - (2899054*HI(1, 1, 0, 0, -1, om1))/12483 + (991354*HI(1, 1, 0, 1, -1, om1))/1387 - 1400*HI(1, 1, 1, -1, -1, om1) - (332028*HI(1, 1, 1, -1, 0, om1))/1387 + (20832225*HI(1, 1, 1, -1, 1, om1))/5548 + (870038*HI(1, 1, 1, 0, -1, om1))/657 - (502923119*HI(1, 1, 1, 0, 0, om1))/898776 + (9081125*HI(1, 1, 1, 1, -1, om1))/1387 - (7166073467*HI(1, 1, 1, 1, 1, om1))/449388").unwrap() ),
        ( Atom::parse("T111bar(4)").unwrap(), Atom::parse("96*HI(-1, -1, -1, -1, 1, 0, om1) + 96*HI(-1, -1, -1, 1, -1, 0, om1) - 312*HI(-1, -1, -1, 1, 1, 1, om1) + 96*HI(-1, -1, 1, -1, -1, 1, om1) + 96*HI(-1, -1, 1, -1, 1, -1, om1) + 64*HI(-1, -1, 1, -1, 1, 0, om1) - 504*HI(-1, -1, 1, -1, 1, 1, om1) + (320*HI(-1, -1, 1, 0, 1, 1, om1))/3 + 192*HI(-1, -1, 1, 1, -1, -1, om1) + 224*HI(-1, -1, 1, 1, -1, 0, om1) - 792*HI(-1, -1, 1, 1, -1, 1, om1) + (127*HI(-1, -1, 1, 1, 0, 1, om1))/3 - 1176*HI(-1, -1, 1, 1, 1, -1, om1) - 409*HI(-1, -1, 1, 1, 1, 0, om1) + 96*HI(-1, 1, -1, -1, -1, 1, om1) + 96*HI(-1, 1, -1, -1, 1, -1, om1) + 64*HI(-1, 1, -1, -1, 1, 0, om1) + 224*HI(-1, 1, -1, 1, -1, 0, om1) - 192*HI(-1, 1, -1, 1, -1, 1, om1) + 160*HI(-1, 1, -1, 1, 0, -1, om1) - 288*HI(-1, 1, -1, 1, 1, -1, om1) - (5189*HI(-1, 1, -1, 1, 1, 1, om1))/2 - 420*HI(-1, 1, 0, -1, 1, 1, om1) + 160*HI(-1, 1, 0, 1, -1, -1, om1) - 500*HI(-1, 1, 0, 1, -1, 1, om1) - (2165*HI(-1, 1, 0, 1, 0, 1, om1))/18 - 740*HI(-1, 1, 0, 1, 1, -1, om1) - (7235*HI(-1, 1, 0, 1, 1, 0, om1))/18 - 192*HI(-1, 1, 1, -1, -1, -1, om1) + 632*HI(-1, 1, 1, -1, -1, 1, om1) - (1269422*HI(-1, 1, 1, -1, 0, 0, om1))/4161 - (1001731*HI(-1, 1, 1, -1, 0, 1, om1))/4161 + 824*HI(-1, 1, 1, -1, 1, -1, om1) + (203321*HI(-1, 1, 1, -1, 1, 0, om1))/1387 - (6715537*HI(-1, 1, 1, -1, 1, 1, om1))/1387 - 1011*HI(-1, 1, 1, 0, -1, 1, om1) + (5798108*HI(-1, 1, 1, 0, 0, -1, om1))/12483 - (1982708*HI(-1, 1, 1, 0, 1, -1, om1))/1387 + 2800*HI(-1, 1, 1, 1, -1, -1, om1) + (664056*HI(-1, 1, 1, 1, -1, 0, om1))/1387 - (20832225*HI(-1, 1, 1, 1, -1, 1, om1))/2774 - (1740076*HI(-1, 1, 1, 1, 0, -1, om1))/657 + (502923119*HI(-1, 1, 1, 1, 0, 0, om1))/449388 - (18162250*HI(-1, 1, 1, 1, 1, -1, om1))/1387 + (7166073467*HI(-1, 1, 1, 1, 1, 1, om1))/224694 + 96*HI(1, -1, -1, -1, -1, 1, om1) + 96*HI(1, -1, -1, -1, 1, -1, om1) + 64*HI(1, -1, -1, -1, 1, 0, om1) + 224*HI(1, -1, -1, 1, -1, 0, om1) - 192*HI(1, -1, -1, 1, -1, 1, om1) + 160*HI(1, -1, -1, 1, 0, -1, om1) - 288*HI(1, -1, -1, 1, 1, -1, om1) - (5189*HI(1, -1, -1, 1, 1, 1, om1))/2 + 536*HI(1, -1, 1, -1, -1, 1, om1) + 728*HI(1, -1, 1, -1, 1, -1, om1) + (1162*HI(1, -1, 1, -1, 1, 0, om1))/3 - 5900*HI(1, -1, 1, -1, 1, 1, om1) - 320*HI(1, -1, 1, 0, -1, -1, om1) - (247571*HI(1, -1, 1, 0, 1, -1, om1))/1387 + (6935939*HI(1, -1, 1, 0, 1, 1, om1))/12483 + 2096*HI(1, -1, 1, 1, -1, -1, om1) + (3995630*HI(1, -1, 1, 1, -1, 0, om1))/4161 - (25993133*HI(1, -1, 1, 1, -1, 1, om1))/2774 + (2339932507*HI(1, -1, 1, 1, 0, 1, om1))/898776 - (20346339*HI(1, -1, 1, 1, 1, -1, om1))/1387 + (1987391897*HI(1, -1, 1, 1, 1, 0, om1))/299592 - 160*HI(1, 0, 1, -1, -1, -1, om1) - (190762625*HI(1, 0, 1, -1, 1, 0, om1))/137313 + (172992580*HI(1, 0, 1, -1, 1, 1, om1))/45771 - (585*HI(1, 0, 1, 0, -1, 1, om1))/2 - (585*HI(1, 0, 1, 0, 1, -1, om1))/2 + (1401897460*HI(1, 0, 1, 0, 1, 0, om1))/1235817 + (1280*HI(1, 0, 1, 1, -1, -1, om1))/3 - (131698420*HI(1, 0, 1, 1, -1, 0, om1))/137313 + (3771385*HI(1, 0, 1, 1, -1, 1, om1))/803 - (13518640*HI(1, 0, 1, 1, 0, -1, om1))/12483 + (94194535*HI(1, 0, 1, 1, 1, -1, om1))/45771 - (224239650581*HI(1, 0, 1, 1, 1, 1, om1))/7414902 + 192*HI(1, 1, -1, -1, -1, -1, om1) + 440*HI(1, 1, -1, -1, -1, 1, om1) + 632*HI(1, 1, -1, -1, 1, -1, om1) + (1162*HI(1, 1, -1, -1, 1, 0, om1))/3 - (19523*HI(1, 1, -1, -1, 1, 1, om1))/3 + (85309*HI(1, 1, -1, 0, 1, -1, om1))/1387 + 1520*HI(1, 1, -1, 1, -1, -1, om1) + 1201*HI(1, 1, -1, 1, -1, 0, om1) - (65065*HI(1, 1, -1, 1, -1, 1, om1))/6 + (1286089*HI(1, 1, -1, 1, 0, -1, om1))/657 + (294745883*HI(1, 1, -1, 1, 0, 1, om1))/112347 - (66781712*HI(1, 1, -1, 1, 1, -1, om1))/4161 + (7672706315*HI(1, 1, -1, 1, 1, 0, om1))/898776 - (1500994997*HI(1, 1, -1, 1, 1, 1, om1))/112347 - 331*HI(1, 1, 0, -1, -1, 1, om1) - (373788*HI(1, 1, 0, -1, 1, -1, om1))/1387 - (1040075156*HI(1, 1, 0, -1, 1, 0, om1))/411939 + (71036008625022455*HI(1, 1, 0, 1, -1, -1, om1))/31412461173192 - (408164510625851*HI(1, 1, 0, 1, -1, 0, om1))/387808162632 + (112240612313169253*HI(1, 1, 0, 1, -1, 1, om1))/62824922346384 - (1671079834843531*HI(1, 1, 0, 1, 1, -1, om1))/296343973332 - 208*HI(1, 1, 1, -1, -1, -1, om1) + (4630766069502545*HI(1, 1, 1, -1, -1, 0, om1))/1903785525648 - (23840913916053689*HI(1, 1, 1, -1, -1, 1, om1))/1903785525648 + (236736287552028065*HI(1, 1, 1, -1, 0, -1, om1))/62824922346384 + (65236932450127865*HI(1, 1, 1, -1, 0, 0, om1))/17134069730832 - (324735078822098209*HI(1, 1, 1, -1, 0, 1, om1))/188474767039152 - (33937640451327857*HI(1, 1, 1, -1, 1, -1, om1))/1903785525648 + (217890103688771579*HI(1, 1, 1, -1, 1, 0, om1))/62824922346384 - (98098907738411707*HI(1, 1, 1, -1, 1, 1, om1))/62824922346384 + (60053281459284215*HI(1, 1, 1, 0, -1, -1, om1))/10470820391064 - (14276309865069491*HI(1, 1, 1, 0, -1, 0, om1))/5235410195532 - (17608277669750297*HI(1, 1, 1, 0, -1, 1, om1))/2326848975792 + (113893834864667471*HI(1, 1, 1, 0, 0, -1, om1))/205608836769984 + (2578864206755062092340321*HI(1, 1, 1, 0, 0, 0, om1))/97922442164725499904 - (4028157988084297*HI(1, 1, 1, 0, 1, -1, om1))/183698603352 + (342310613376007581255845*HI(1, 1, 1, 0, 1, 1, om1))/5153812745511868416 - (580499376653049347*HI(1, 1, 1, 1, -1, -1, om1))/31412461173192 - (47970936019094809*HI(1, 1, 1, 1, -1, 0, om1))/3306574860336 + (175367882302986940*HI(1, 1, 1, 1, -1, 1, om1))/3926557646649 - (48827026671130603771*HI(1, 1, 1, 1, 0, -1, om1))/1130848602234912 + (29301329002972334771885311*HI(1, 1, 1, 1, 0, 1, om1))/195844884329450999808 + (4274072449929751295*HI(1, 1, 1, 1, 1, -1, om1))/31412461173192 + (9649675317039589744890323*HI(1, 1, 1, 1, 1, 0, om1))/65281628109816999936").unwrap() )
    ])
});

#[allow(unused)]
impl Vakint {
    pub fn process_matad_form_output(&self, form_output: String) -> Result<Atom, VakintError> {
        let mut res = self.process_form_output(form_output)?;
        res = Pattern::parse("d").unwrap().replace_all(
            res.as_view(),
            &Pattern::parse("4-2*ep").unwrap().into(),
            None,
            None,
        );
        res = fun!(S.vkdot, fun!(S.p, S.id1_a), fun!(S.p, S.id2_a))
            .into_pattern()
            .replace_all(
                res.as_view(),
                &fun!(S.dot, fun!(S.p, S.id1_a), fun!(S.p, S.id2_a))
                    .into_pattern()
                    .into(),
                Some(
                    &(Condition::from((S.id1_, number_condition()))
                        & Condition::from((S.id2_, number_condition()))),
                ),
                None,
            );
        Ok(res)
    }

    pub fn substitute_gam_functions(&self, result: AtomView) -> Atom {
        let mut res = result.to_owned();
        res = Pattern::parse("Gam(x_,y_)").unwrap().replace_all(
            res.as_view(),
            &Pattern::parse("exp(ep*y_*EulerGamma)*Gamma(x_+ep*y_)")
                .unwrap()
                .into(),
            None,
            None,
        );
        res = Pattern::parse("iGam(x_,y_)").unwrap().replace_all(
            res.as_view(),
            &Pattern::parse("exp(-ep*y_*EulerGamma)/Gamma(x_+ep*y_)")
                .unwrap()
                .into(),
            None,
            None,
        );
        res
    }

    pub fn substitute_masters_directly(&self, result: AtomView) -> Result<Atom, VakintError> {
        let processed_constants = DIRECT_SUBSTITUTIONS
            .iter()
            .map(|(src, (trgt, condition))| {
                (
                    src,
                    (
                        set_precision_in_polynomial_atom(
                            trgt.as_view(),
                            State::get_symbol("ep"),
                            &self.settings,
                        ),
                        condition.clone(),
                    ),
                )
            })
            .collect::<Vec<_>>();
        // for (a, (b, _c)) in processed_constants.clone() {
        //     println!("{} -> {}", a, b);
        // }
        let mut r = result.to_owned();
        r.repeat_map(Box::new(move |av: AtomView| {
            let mut res = av.to_owned();
            res = self.substitute_gam_functions(res.as_view());
            for (src, (trgt, matching_condition)) in processed_constants.iter() {
                res = src.into_pattern().replace_all(
                    res.as_view(),
                    &trgt.into_pattern().into(),
                    Some(matching_condition),
                    None,
                );
            }
            res
        }));
        // println!("DONE! {}", r);
        Ok(r)
    }

    pub fn expand_matad_masters(&self, result: AtomView) -> Result<Atom, VakintError> {
        let mut r = result.to_owned();
        r.repeat_map(Box::new(move |av: AtomView| {
            let mut res = av.to_owned();
            res = self.substitute_gam_functions(res.as_view());
            for (src, (trgt, restriction)) in MASTERS_EXPANSION.iter() {
                res = src.into_pattern().replace_all(
                    res.as_view(),
                    &trgt.into_pattern().into(),
                    Some(restriction),
                    None,
                );
            }
            res
        }));
        if let Some(m) = Pattern::parse("GammaArgs(x_,y_)")
            .unwrap()
            .pattern_match(
                r.as_view(),
                &Condition::default(),
                &MatchSettings::default(),
            )
            .next()
        {
            return Err(VakintError::MATADError(
            format!("MATAD result contains a Gamma function whose numerical evaluation is not implemented in vakint: Gamma({}+{}*{})",
                m.match_stack.get(S.x_).unwrap().to_atom(),
                m.match_stack.get(S.y_).unwrap().to_atom(),
                self.settings.epsilon_symbol
            ),
        ));
        }
        Ok(r)
    }

    pub fn substitute_masters(&self, result: AtomView) -> Result<Atom, VakintError> {
        let mut r = result.to_owned();
        r.repeat_map(Box::new(move |av: AtomView| {
            let mut res = av.to_owned();
            for (src, trgt) in MASTERS_SUBSTITUTION.iter() {
                res = src.into_pattern().replace_all(
                    res.as_view(),
                    &trgt.into_pattern().into(),
                    None,
                    None,
                );
            }
            res
        }));

        Ok(r)
    }

    pub fn substitute_poly_gamma(&self, result: AtomView) -> Result<Atom, VakintError> {
        let processed_constants = POLY_GAMMA_SUBSTITUTIONS
            .iter()
            .map(|(src, trgt)| {
                (
                    src,
                    set_precision_in_float_atom(trgt.as_view(), &self.settings),
                )
            })
            .collect::<Vec<_>>();
        let mut r = result.to_owned();

        r = Pattern::parse("Gamma(n_)").unwrap().replace_all(
            r.as_view(),
            &PatternOrMap::Map(Box::new(move |match_in| {
                let n = get_integer_from_match(match_in.get(S.n_).unwrap()).unwrap() as u32;
                Atom::new_num(Integer::factorial(n - 1))
            })),
            Some(&Condition::from((S.n_, gt_condition(0)))),
            None,
        );
        r.repeat_map(Box::new(move |av: AtomView| {
            let mut res = av.to_owned();
            for (src, trgt) in processed_constants.iter() {
                res = src.into_pattern().replace_all(
                    res.as_view(),
                    &trgt.into_pattern().into(),
                    None,
                    None,
                );
            }
            res
        }));

        if let Some(m) = Pattern::parse("PolyGamma(x_,y_)")
            .unwrap()
            .pattern_match(
                r.as_view(),
                &Condition::default(),
                &MatchSettings::default(),
            )
            .next()
        {
            return Err(VakintError::MATADError(
            format!("MATAD result contains a PolyGamma function whose numerical evaluation is not implemented in vakint: PolyGamma({},{})",
                m.match_stack.get(S.x_).unwrap().to_atom(),
                m.match_stack.get(S.y_).unwrap().to_atom()
            ),
        ));
        }
        Ok(r)
    }

    pub fn substitute_hpls(&self, result: AtomView) -> Result<Atom, VakintError> {
        let processed_constants = HPL_SUBSTITUTIONS
            .iter()
            .map(|(src, trgt)| {
                (
                    src,
                    set_precision_in_float_atom(trgt.as_view(), &self.settings),
                )
            })
            .collect::<Vec<_>>();
        let mut r = result.to_owned();

        r.repeat_map(Box::new(move |av: AtomView| {
            let mut res = av.to_owned();
            for (src, trgt) in processed_constants.iter() {
                res = src.into_pattern().replace_all(
                    res.as_view(),
                    &trgt.into_pattern().into(),
                    None,
                    None,
                );
            }
            res
        }));

        Ok(r)
    }

    pub fn substitute_additional_constants(&self, result: AtomView) -> Result<Atom, VakintError> {
        let processed_constants = ADDITIONAL_CONSTANTS
            .iter()
            .map(|(src, trgt)| {
                (
                    src,
                    set_precision_in_float_atom(trgt.as_view(), &self.settings),
                )
            })
            .collect::<Vec<_>>();
        let mut r = result.to_owned();
        r.repeat_map(Box::new(move |av: AtomView| {
            let mut res = av.to_owned();
            for (src, trgt) in processed_constants.iter() {
                res = src.into_pattern().replace_all(
                    res.as_view(),
                    &trgt.into_pattern().into(),
                    None,
                    None,
                );
            }
            res
        }));

        Ok(r)
    }

    pub fn matad_evaluate(
        &self,
        vakint: &Vakint,
        input_numerator: AtomView,
        integral_specs: &ReplacementRules,
        options: &MATADOptions,
    ) -> Result<Atom, VakintError> {
        let integral = integral_specs.canonical_topology.get_integral();

        debug!(
            "Processing the following integral with {}:\n{}",
            "MATAD".green(),
            integral
        );

        let err = Err(VakintError::InvalidGenericExpression(format!(
            "Could not find the shorthand integral name in the MATAD expression: {}",
            integral
                .short_expression
                .as_ref()
                .map(|a| a.to_canonical_string())
                .unwrap_or("None".to_string())
        )));

        let integral_name = if let Some(short_expression) = integral.short_expression.as_ref() {
            if let Some(m) = fun!(S.fun_, S.any_a___)
                .into_pattern()
                .pattern_match(
                    short_expression.as_view(),
                    &Condition::from((S.fun_, symbol_condition())),
                    &MatchSettings::default(),
                )
                .next()
            {
                m.match_stack
                    .get(S.fun_)
                    .unwrap()
                    .to_atom()
                    .to_canonical_string()
            } else {
                return err;
            }
        } else {
            return err;
        };

        // Here we map the propagators in the correct order for the definition of the topology in MATAD
        let vakint_to_matad_edge_map = match integral_name.as_str() {
            "I1L" => vec![1],
            "I2L" => vec![2, 3, 1],
            "I3L" => vec![4, 5, 6, 1, 2, 3],
            _ => {
                return Err(VakintError::InvalidGenericExpression(format!(
                    "Integral {} is not supported by MATAD.",
                    integral_name
                )))
            }
        };

        let mut numerator = Vakint::convert_to_dot_notation(input_numerator);
        if utils::could_match(
            &fun!(S.dot, fun!(S.p, S.id1_a), fun!(S.k, S.id2_a)).into_pattern(),
            numerator.as_view(),
        ) {
            return Err(VakintError::InvalidNumerator(
                format!("Make sure the numerator has been tensor-reduced before being processed by MATAD : {}", numerator)
            ));
        }

        // Now map all exterior dot products into a special function `vkdot` so that it does not interfere with MATAD
        numerator = fun!(S.dot, fun!(S.p, S.id1_a), fun!(S.p, S.id2_a))
            .into_pattern()
            .replace_all(
                numerator.as_view(),
                &fun!(S.vkdot, fun!(S.p, S.id1_a), fun!(S.p, S.id2_a))
                    .into_pattern()
                    .into(),
                Some(
                    &(Condition::from((S.id1_, number_condition()))
                        & Condition::from((S.id2_, number_condition()))),
                ),
                None,
            );

        // And finally map all interior products into the form p<i>.p<i> expected by matad, where <i> is the edge id carrying momentum k<i>.
        let momenta = integral_specs.get_propagator_property_list("q_");
        let mut lmb_prop_indices = vec![];
        for i_loop in 1..=integral.n_loops {
            if let Some((i_edge, _)) = momenta.iter().find(|(i_prop, k)| {
                k.as_view() == fun!(S.k, Atom::new_num(i_loop as i64)).as_view()
            }) {
                lmb_prop_indices.push(*i_edge);
            } else {
                return Err(VakintError::InvalidGenericExpression(format!(
                    "Could not find LMB edge for momentum k({}) in a topology supported by MATAD.",
                    i_loop
                )));
            }
        }

        let vakint_to_matad_edge_map_copy = vakint_to_matad_edge_map.clone();
        numerator = fun!(S.dot, fun!(S.k, S.id1_a), fun!(S.k, S.id2_a))
            .into_pattern()
            .replace_all(
                numerator.as_view(),
                &PatternOrMap::Map(Box::new(move |match_in| {
                    let id1 = get_integer_from_match(match_in.get(S.id1_).unwrap()).unwrap();
                    let id2 = get_integer_from_match(match_in.get(S.id2_).unwrap()).unwrap();
                    let i_edge1 =
                        vakint_to_matad_edge_map_copy[lmb_prop_indices[(id1 - 1) as usize] - 1];
                    let i_edge2 =
                        vakint_to_matad_edge_map_copy[lmb_prop_indices[(id2 - 1) as usize] - 1];
                    // in MATAD, the loop momenta dot products need to be written p<i>.p<i>
                    // The outter dot will be converted to an inner dot in the next step
                    // Also keep in mind that in MATAD propagators are euclidean propagators so
                    // a minus sign is necessary here.
                    Atom::parse(format!("-dot(p{},p{})", i_edge1, i_edge2).as_str()).unwrap()
                })),
                Some(
                    &(Condition::from((S.id1_, number_condition()))
                        & Condition::from((S.id2_, number_condition()))),
                ),
                None,
            );

        // Substitute eps by (4-d)/2
        numerator = Pattern::parse(&vakint.settings.epsilon_symbol)
            .unwrap()
            .replace_all(
                numerator.as_view(),
                &Pattern::parse("(4-d)/2").unwrap().into(),
                None,
                None,
            );

        let dot_produce_replacer =
            Regex::new(r"dot\((?<vecA>[\w|\d]+),(?<vecB>[\w|\d]+)\)").unwrap();
        let numerator_string = dot_produce_replacer
            .replace_all(&numerator.to_canonical_string(), "($vecA.$vecB)")
            .to_string();

        let mut powers = (1..=integral.n_props)
            .map(|i_prop| {
                integral_specs
                    .canonical_expression_substitutions
                    .get(&fun!(S.pow, Atom::new_num(i_prop as i64)))
                    .map(|a| a.try_into().unwrap())
                    .unwrap_or(0)
            })
            .collect::<Vec<_>>();

        let integral_string = powers
            .iter()
            .zip(vakint_to_matad_edge_map)
            .map(|(pwr, matag_edge_index)| format!("s{}m^{}", matag_edge_index, pwr))
            .collect::<Vec<_>>()
            .join("*");

        //println!("MATAD input string: {}", format!("({})*({})", numerator_string, integral_string));

        let template = Template::parse_template(TEMPLATES.get("run_matad.txt").unwrap()).unwrap();
        let mut vars: HashMap<String, String> = HashMap::new();
        vars.insert("numerator".into(), numerator_string);
        vars.insert("integral".into(), integral_string);
        vars.insert("n_loops".into(), format!("{}", integral.n_loops));
        let rendered = template
            .render(&RenderOptions {
                variables: vars,
                ..Default::default()
            })
            .unwrap();

        let muv_sq_symbol = if let Some(m) = fun!(S.fun_, S.x_a, S.any_a___)
            .into_pattern()
            .pattern_match(
                integral.short_expression.as_ref().unwrap().as_view(),
                &(Condition::from((S.x_, symbol_condition()))
                    & Condition::from((S.fun_, symbol_condition()))),
                &MatchSettings::default(),
            )
            .next()
        {
            match m.match_stack.get(S.x_).unwrap().to_atom() {
                Atom::Var(s) => s.get_symbol(),
                _ => {
                    return Err(VakintError::MalformedGraph(format!(
                        "Could not find muV in graph:\n{}",
                        integral.short_expression.as_ref().unwrap()
                    )));
                }
            }
        } else {
            return Err(VakintError::MalformedGraph(format!(
                "Could not find muV in graph:\n{}",
                integral.short_expression.as_ref().unwrap()
            )));
        };

        let form_result = vakint.run_form(
            &["matad-ng.hh".into()],
            ("run_matad.frm".into(), rendered),
            vec![],
            vakint.settings.clean_tmp_dir,
        )?;

        //println!("form_result = {}", form_result);
        let mut evaluated_integral = vakint.process_matad_form_output(form_result)?;
        //println!("evaluated_integral first = {}", evaluated_integral);

        evaluated_integral = Pattern::parse("M^pow_").unwrap().replace_all(
            evaluated_integral.as_view(),
            &Pattern::parse(format!("{}^(pow_/2)", muv_sq_symbol).as_str())
                .unwrap()
                .into(),
            Some(&Condition::from((S.pow_, even_condition()))),
            None,
        );
        let matad_normalization_correction = Atom::parse(
            format!(
                "( 
                    (𝑖*(𝜋^((4-2*{eps})/2)))\
                  * (exp(-EulerGamma))^({eps})\
                 )^{n_loops}",
                eps = self.settings.epsilon_symbol,
                n_loops = integral.n_loops
            )
            .as_str(),
        )
        .unwrap();

        // Adjust normalization factor
        let mut complete_normalization = matad_normalization_correction
            * S.n_loops.into_pattern().replace_all(
                vakint
                    .settings
                    .get_integral_normalization_factor_atom()?
                    .as_view(),
                &Atom::new_num(integral.n_loops as i64).into_pattern().into(),
                None,
                None,
            );
        complete_normalization =
            Atom::new_var(State::get_symbol(self.settings.epsilon_symbol.as_str()))
                .into_pattern()
                .replace_all(
                    complete_normalization.as_view(),
                    &Pattern::parse("ep").unwrap().into(),
                    None,
                    None,
                );

        evaluated_integral = evaluated_integral * complete_normalization;

        if options.expand_masters {
            let expansion_depth = vakint.settings.number_of_terms_in_epsilon_expansion
                - (integral.n_loops as i64)
                - 1;
            if options.direct_numerical_substition {
                debug!(
                    "{}: Substitute masters directly with their numerical values, with terms up to and including {}^{} ...",
                    "MATAD".green(),
                    self.settings.epsilon_symbol,
                    expansion_depth
                );
                evaluated_integral =
                    self.substitute_masters_directly(evaluated_integral.as_view())?;
            } else {
                debug!(
                    "{}: Expanding masters and including terms up to and including {}^{} ...",
                    "MATAD".green(),
                    self.settings.epsilon_symbol,
                    expansion_depth
                );
                evaluated_integral = self.expand_matad_masters(evaluated_integral.as_view())?;
            }
            // Temporary work around for series bug in Symbolica
            // evaluated_integral = Pattern::parse("(any___)^-1").unwrap().replace_all(
            //     evaluated_integral.as_view(),
            //     &PatternOrMap::Map(Box::new(move |match_in| {
            //         Atom::new_num(1) / match_in.get(S.any___).unwrap().to_atom().expand()
            //     })),
            //     None,
            //     None,
            // );
            debug!(
                "{}: Series expansion of the result up to and including terms of order {}^{} ...",
                "MATAD".green(),
                self.settings.epsilon_symbol,
                expansion_depth
            );
            evaluated_integral = match evaluated_integral.series(
                State::get_symbol("ep"),
                Atom::Zero.as_view(),
                Rational::from(expansion_depth),
                true,
            ) {
                Ok(a) => a,
                Err(e) => return Err(VakintError::SymbolicaError(e.to_string())),
            }
            .to_atom();

            // Sanity check
            if let Some(m) = Pattern::parse("Oep(x_,y_)")
                .unwrap()
                .pattern_match(
                    evaluated_integral.as_view(),
                    &Condition::default(),
                    &MatchSettings::default(),
                )
                .next()
            {
                return Err(VakintError::MATADError(format!(
                    "MATAD expansion yielded terms beyond expansion depth supported: Oep({},{})",
                    m.match_stack.get(S.x_).unwrap().to_atom(),
                    m.match_stack.get(S.y_).unwrap().to_atom(),
                )));
            }
            if options.direct_numerical_substition {
                debug!(
                    "{}: Substituting PolyGamma and period constants...",
                    "MATAD".green()
                );
                evaluated_integral = evaluated_integral.expand();
                evaluated_integral = self.substitute_poly_gamma(evaluated_integral.as_view())?;
                evaluated_integral =
                    self.substitute_additional_constants(evaluated_integral.as_view())?;
            } else if options.susbstitute_masters {
                debug!("{}: Substituting masters with HPLs ...", "MATAD".green());
                evaluated_integral = self.substitute_masters(evaluated_integral.as_view())?;
                if options.substitute_hpls {
                    // Expanding here is important to improve efficiency and avoid symbolica bugs with floating point coefficients
                    evaluated_integral = evaluated_integral.expand();
                    debug!("{}: Substituting HPLs with numerics ...", "MATAD".green());
                    evaluated_integral = self.substitute_hpls(evaluated_integral.as_view())?;
                    evaluated_integral =
                        self.substitute_poly_gamma(evaluated_integral.as_view())?;
                    evaluated_integral =
                        self.substitute_additional_constants(evaluated_integral.as_view())?;
                }
            }
        }

        evaluated_integral = Pattern::parse("ep").unwrap().replace_all(
            evaluated_integral.as_view(),
            &Atom::new_var(State::get_symbol(self.settings.epsilon_symbol.as_str()))
                .into_pattern()
                .into(),
            None,
            None,
        );

        if !vakint.settings.use_dot_product_notation {
            evaluated_integral =
                Vakint::convert_from_dot_notation(evaluated_integral.as_view(), false);
        }

        let log_muv_mu_sq = fun!(
            State::LOG,
            Atom::new_var(muv_sq_symbol)
                / Atom::new_var(State::get_symbol(vakint.settings.mu_r_sq_symbol.as_str()))
        );

        let log_mu_sq = fun!(
            State::LOG,
            Atom::new_var(State::get_symbol(vakint.settings.mu_r_sq_symbol.as_str()))
        );

        evaluated_integral = Pattern::parse("logmUVmu").unwrap().replace_all(
            evaluated_integral.as_view(),
            &(log_muv_mu_sq).into_pattern().into(),
            None,
            None,
        );
        evaluated_integral = Pattern::parse("log_mu_sq").unwrap().replace_all(
            evaluated_integral.as_view(),
            &(log_mu_sq).into_pattern().into(),
            None,
            None,
        );

        // println!(
        //     "evaluated_integral: {}",
        //     evaluated_integral.to_canonical_string()
        // );

        Ok(evaluated_integral)
    }
}
